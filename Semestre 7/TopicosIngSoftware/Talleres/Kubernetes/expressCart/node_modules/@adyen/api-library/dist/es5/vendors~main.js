exports.ids=[1],exports.modules=[,,,,,,,,,,,function(e,t,n){"use strict";e.exports=function(e){function t(e){for(var t=0,n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){var n;function i(){if(i.enabled){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];var s=i,c=Number(new Date),u=c-(n||c);s.diff=u,s.prev=n,s.curr=c,n=c,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");var a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,function(e,n){if("%%"===e)return e;a++;var o=r.formatters[n];if("function"==typeof o){var i=t[a];e=o.call(s,i),t.splice(a,1),a--}return e}),r.formatArgs.call(s,t),(s.log||r.log).apply(s,t)}}return i.namespace=e,i.enabled=r.enabled(e),i.useColors=r.useColors(),i.color=t(e),i.destroy=o,i.extend=s,"function"==typeof r.init&&r.init(i),r.instances.push(i),i}function o(){var e=r.instances.indexOf(this);return-1!==e&&(r.instances.splice(e,1),!0)}function s(e,t){return r(this.namespace+(void 0===t?":":t)+e)}return r.debug=r,r.default=r,r.coerce=function(e){return e instanceof Error?e.stack||e.message:e},r.disable=function(){r.enable("")},r.enable=function(e){var t;r.save(e),r.names=[],r.skips=[];var n=("string"==typeof e?e:"").split(/[\s,]+/),o=n.length;for(t=0;t<o;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")));for(t=0;t<r.instances.length;t++){var s=r.instances[t];s.enabled=r.enabled(s.namespace)}},r.enabled=function(e){if("*"===e[e.length-1])return!0;var t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1},r.humanize=n(29),Object.keys(e).forEach(function(t){r[t]=e[t]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=t,r.enable(r.load()),r}},,,,,,function(e,t,n){var r=n(18),o=n(19),s=n(5),i=n(20),c=n(21),u=n(6).inherits,a=n(27)("https-proxy-agent");function l(e){if(!(this instanceof l))return new l(e);if("string"==typeof e&&(e=s.parse(e)),!e)throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");a("creating new HttpsProxyAgent instance: %o",e),c.call(this,e);var t=Object.assign({},e);this.secureProxy=!!t.protocol&&/^https:?$/i.test(t.protocol),t.host=t.hostname||t.host,t.port=+t.port||(this.secureProxy?443:80),!this.secureProxy||"ALPNProtocols"in t||(t.ALPNProtocols=["http 1.1"]),t.host&&t.path&&(delete t.path,delete t.pathname),this.proxy=t,this.defaultPort=443}function f(e){e.resume()}e.exports=l,u(l,c),l.prototype.callback=function(e,t,n){var s,c=this.proxy;s=this.secureProxy?o.connect(c):r.connect(c);var u=[],l=0;function p(){var i=s.read();i?function(i){u.push(i),l+=i.length;var c=Buffer.concat(u,l),d=c.toString("ascii");if(!~d.indexOf("\r\n\r\n"))return a("have not received end of HTTP headers yet..."),void p();var v=d.substring(0,d.indexOf("\r\n")),C=+v.split(" ")[1];if(a("got proxy server response: %o",v),200==C){var y=s;u=c=null,t.secureEndpoint&&(a("upgrading proxy-connected socket to TLS connection: %o",t.host),t.socket=s,t.servername=t.servername||t.host,t.host=null,t.hostname=null,t.port=null,y=o.connect(t)),h(),e.once("socket",f),n(null,y)}else h(),s.destroy(),(s=new r.Socket).readable=!0,u=c,e.once("socket",m),n(null,s)}(i):s.once("readable",p)}function h(){s.removeListener("end",v),s.removeListener("error",C),s.removeListener("close",d),s.removeListener("readable",p)}function d(e){a("onclose had error %o",e)}function v(){a("onend")}function C(e){h(),n(e)}function m(e){a("replaying proxy buffer for failed request"),i(e.listenerCount("data")>0),e.push(u),u=null}s.on("error",C),s.on("close",d),s.on("end",v),p();var y="CONNECT "+(t.host+":"+t.port)+" HTTP/1.1\r\n",g=Object.assign({},c.headers);c.auth&&(g["Proxy-Authorization"]="Basic "+Buffer.from(c.auth).toString("base64"));var b,w,_=t.host;b=t.port,w=t.secureEndpoint,Boolean(!w&&80===b||w&&443===b)||(_+=":"+t.port),g.Host=_,g.Connection="close",Object.keys(g).forEach(function(e){y+=e+": "+g[e]+"\r\n"}),s.write(y+"\r\n")}},,,,function(e,t,n){"use strict";n(22);const r=n(6).inherits,o=n(23),s=n(26).EventEmitter;function i(e,t){if(!(this instanceof i))return new i(e,t);s.call(this),this._promisifiedCallback=!1;let n=t;"function"==typeof e?this.callback=e:e&&(n=e),this.timeout=n&&n.timeout||null,this.options=n}e.exports=i,r(i,s),i.prototype.callback=function(e,t){throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`')},i.prototype.addRequest=function(e,t){const n=Object.assign({},t);null==n.host&&(n.host="localhost"),null==n.port&&(n.port=n.secureEndpoint?443:80);const r=Object.assign({},this.options,n);let s;r.host&&r.path&&delete r.path,delete r.agent,delete r.hostname,delete r._defaultAgent,delete r.defaultPort,delete r.createConnection,e._last=!0,e.shouldKeepAlive=!1;let i=!1;const c=this.timeout,u=this.freeSocket;function a(t){e._hadError||(e.emit("error",t),e._hadError=!0)}function l(e){i||(null!=s&&(clearTimeout(s),s=null),a(e))}!this._promisifiedCallback&&this.callback.length>=3&&(this.callback=o(this.callback,this),this._promisifiedCallback=!0),c>0&&(s=setTimeout(function(){s=null,i=!0;const e=new Error('A "socket" was not created for HTTP request before '+c+"ms");e.code="ETIMEOUT",a(e)},c));try{Promise.resolve(this.callback(e,r)).then(function(t){var n;i||(null!=s&&(clearTimeout(s),s=null),(n=t)&&"function"==typeof n.addRequest?t.addRequest(e,r):t?(t.on("free",function(){u(t,r)}),e.onSocket(t)):a(new Error("no Duplex stream was returned to agent-base for `"+e.method+" "+e.path+"`")))},l)}catch(e){Promise.reject(e).catch(l)}},i.prototype.freeSocket=function(e,t){e.destroy()}},function(e,t,n){"use strict";const r=n(5),o=n(10),s="__agent_base_https_request_patched__";var i;o.request[s]||(o.request=(i=o.request,function(e,t){let n;return null==(n="string"==typeof e?r.parse(e):Object.assign({},e)).port&&(n.port=443),n.secureEndpoint=!0,i.call(o,n,t)}),o.request[s]=!0),o.get=function(e,t,n){let s;"string"==typeof e&&t&&"function"!=typeof t?s=Object.assign({},r.parse(e),t):t||n?n||(s=e,n=t):s=e;const i=o.request(s,n);return i.end(),i}},function(e,t,n){"use strict";e.exports=function(){var e=n(24);function t(e){return e&&"function"==typeof e.then&&"function"==typeof e.catch}return function(n,r){return function(){for(var o=arguments.length,s=Array(o),i=0;i<o;i++)s[i]=arguments[i];var c=r&&r.multiArgs,u=void 0;return r&&r.thisArg?u=r.thisArg:r&&(u=r),new e(function(e,r){s.push(function(t){if(t)return r(t);for(var n=arguments.length,o=Array(n>1?n-1:0),s=1;s<n;s++)o[s-1]=arguments[s];if(!1==!!c)return e(o[0]);e(o)});var o=n.apply(u,s);t(o)&&e(o)})}}}()},function(e,t,n){"use strict";var r;e.exports=(r=void 0,r=void 0!==global?global:void 0!==window&&window.document?window:self,function(){if(!r.hasOwnProperty("Promise"))return!1;var e,t=r.Promise;return!!(t.hasOwnProperty("resolve")&&t.hasOwnProperty("reject")&&t.hasOwnProperty("all")&&t.hasOwnProperty("race")&&(e=void 0,new r.Promise(function(t){e=t})&&"function"==typeof e))}()?r.Promise:n(25).Promise)},function(e,t,n){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.8+1e68dce6
 */var r;r=function(){"use strict";function e(e){return"function"==typeof e}var t=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},n=0,r=void 0,o=void 0,s=function(e,t){p[n]=e,p[n+1]=t,2===(n+=2)&&(o?o(h):y())},i="undefined"!=typeof window?window:void 0,c=i||{},u=c.MutationObserver||c.WebKitMutationObserver,a="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),l="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function f(){var e=setTimeout;return function(){return e(h,1)}}var p=new Array(1e3);function h(){for(var e=0;e<n;e+=2){(0,p[e])(p[e+1]),p[e]=void 0,p[e+1]=void 0}n=0}var d,v,C,m,y=void 0;function g(e,t){var n=this,r=new this.constructor(_);void 0===r[w]&&L(r);var o=n._state;if(o){var i=arguments[o-1];s(function(){return M(o,r,i,n._result)})}else k(n,r,e,t);return r}function b(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var t=new this(_);return x(t,e),t}a?y=function(){return process.nextTick(h)}:u?(v=0,C=new u(h),m=document.createTextNode(""),C.observe(m,{characterData:!0}),y=function(){m.data=v=++v%2}):l?((d=new MessageChannel).port1.onmessage=h,y=function(){return d.port2.postMessage(0)}):y=void 0===i?function(){try{var e=Function("return this")().require("vertx");return void 0!==(r=e.runOnLoop||e.runOnContext)?function(){r(h)}:f()}catch(e){return f()}}():f();var w=Math.random().toString(36).substring(2);function _(){}var F=void 0,O=1,E=2;function A(t,n,r){n.constructor===t.constructor&&r===g&&n.constructor.resolve===b?function(e,t){t._state===O?T(e,t._result):t._state===E?P(e,t._result):k(t,void 0,function(t){return x(e,t)},function(t){return P(e,t)})}(t,n):void 0===r?T(t,n):e(r)?function(e,t,n){s(function(e){var r=!1,o=function(e,t,n,r){try{e.call(t,n,r)}catch(e){return e}}(n,t,function(n){r||(r=!0,t!==n?x(e,n):T(e,n))},function(t){r||(r=!0,P(e,t))},e._label);!r&&o&&(r=!0,P(e,o))},e)}(t,n,r):T(t,n)}function x(e,t){if(e===t)P(e,new TypeError("You cannot resolve a promise with itself"));else if(o=typeof(r=t),null===r||"object"!==o&&"function"!==o)T(e,t);else{var n=void 0;try{n=t.then}catch(t){return void P(e,t)}A(e,t,n)}var r,o}function R(e){e._onerror&&e._onerror(e._result),S(e)}function T(e,t){e._state===F&&(e._result=t,e._state=O,0!==e._subscribers.length&&s(S,e))}function P(e,t){e._state===F&&(e._state=E,e._result=t,s(R,e))}function k(e,t,n,r){var o=e._subscribers,i=o.length;e._onerror=null,o[i]=t,o[i+O]=n,o[i+E]=r,0===i&&e._state&&s(S,e)}function S(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var r=void 0,o=void 0,s=e._result,i=0;i<t.length;i+=3)r=t[i],o=t[i+n],r?M(n,r,o,s):o(s);e._subscribers.length=0}}function M(t,n,r,o){var s=e(r),i=void 0,c=void 0,u=!0;if(s){try{i=r(o)}catch(e){u=!1,c=e}if(n===i)return void P(n,new TypeError("A promises callback cannot return that same promise."))}else i=o;n._state!==F||(s&&u?x(n,i):!1===u?P(n,c):t===O?T(n,i):t===E&&P(n,i))}var j=0;function L(e){e[w]=j++,e._state=void 0,e._result=void 0,e._subscribers=[]}var I=function(){function e(e,n){this._instanceConstructor=e,this.promise=new e(_),this.promise[w]||L(this.promise),t(n)?(this.length=n.length,this._remaining=n.length,this._result=new Array(this.length),0===this.length?T(this.promise,this._result):(this.length=this.length||0,this._enumerate(n),0===this._remaining&&T(this.promise,this._result))):P(this.promise,new Error("Array Methods must be provided an Array"))}return e.prototype._enumerate=function(e){for(var t=0;this._state===F&&t<e.length;t++)this._eachEntry(e[t],t)},e.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,r=n.resolve;if(r===b){var o=void 0,s=void 0,i=!1;try{o=e.then}catch(e){i=!0,s=e}if(o===g&&e._state!==F)this._settledAt(e._state,t,e._result);else if("function"!=typeof o)this._remaining--,this._result[t]=e;else if(n===N){var c=new n(_);i?P(c,s):A(c,e,o),this._willSettleAt(c,t)}else this._willSettleAt(new n(function(t){return t(e)}),t)}else this._willSettleAt(r(e),t)},e.prototype._settledAt=function(e,t,n){var r=this.promise;r._state===F&&(this._remaining--,e===E?P(r,n):this._result[t]=n),0===this._remaining&&T(r,this._result)},e.prototype._willSettleAt=function(e,t){var n=this;k(e,void 0,function(e){return n._settledAt(O,t,e)},function(e){return n._settledAt(E,t,e)})},e}(),N=function(){function t(e){this[w]=j++,this._result=this._state=void 0,this._subscribers=[],_!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof t?function(e,t){try{t(function(t){x(e,t)},function(t){P(e,t)})}catch(t){P(e,t)}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}return t.prototype.catch=function(e){return this.then(null,e)},t.prototype.finally=function(t){var n=this.constructor;return e(t)?this.then(function(e){return n.resolve(t()).then(function(){return e})},function(e){return n.resolve(t()).then(function(){throw e})}):this.then(t,t)},t}();return N.prototype.then=g,N.all=function(e){return new I(this,e).promise},N.race=function(e){var n=this;return t(e)?new n(function(t,r){for(var o=e.length,s=0;s<o;s++)n.resolve(e[s]).then(t,r)}):new n(function(e,t){return t(new TypeError("You must pass an array to race."))})},N.resolve=b,N.reject=function(e){var t=new this(_);return P(t,e),t},N._setScheduler=function(e){o=e},N._setAsap=function(e){s=e},N._asap=s,N.polyfill=function(){var e=void 0;if("undefined"!=typeof global)e=global;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var n=null;try{n=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===n&&!t.cast)return}e.Promise=N},N.Promise=N,N},e.exports=r()},,function(e,t,n){"use strict";"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=n(28):e.exports=n(30)},function(e,t,n){"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}t.log=function(){var e;return"object"===("undefined"==typeof console?"undefined":r(console))&&console.log&&(e=console).log.apply(e,arguments)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(r++,"%c"===e&&(o=r))}),t.splice(o,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){var e;try{e=t.storage.getItem("debug")}catch(e){}!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(11)(t),e.exports.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},function(e,t){var n=1e3,r=60*n,o=60*r,s=24*o,i=7*s,c=365.25*s;function u(e,t,n,r){var o=t>=1.5*n;return Math.round(e/n)+" "+r+(o?"s":"")}e.exports=function(e,t){t=t||{};var a=typeof e;if("string"===a&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var u=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return u*c;case"weeks":case"week":case"w":return u*i;case"days":case"day":case"d":return u*s;case"hours":case"hour":case"hrs":case"hr":case"h":return u*o;case"minutes":case"minute":case"mins":case"min":case"m":return u*r;case"seconds":case"second":case"secs":case"sec":case"s":return u*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return u;default:return}}(e);if("number"===a&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=s)return u(e,t,s,"day");if(t>=o)return u(e,t,o,"hour");if(t>=r)return u(e,t,r,"minute");if(t>=n)return u(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=s)return Math.round(e/s)+"d";if(t>=o)return Math.round(e/o)+"h";if(t>=r)return Math.round(e/r)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){"use strict";var r=n(31),o=n(6);t.init=function(e){e.inspectOpts={};for(var n=Object.keys(t.inspectOpts),r=0;r<n.length;r++)e.inspectOpts[n[r]]=t.inspectOpts[n[r]]},t.log=function(){return process.stderr.write(o.format.apply(o,arguments)+"\n")},t.formatArgs=function(n){var r=this.namespace;if(this.useColors){var o=this.color,s="[3"+(o<8?o:"8;5;"+o),i="  ".concat(s,";1m").concat(r," [0m");n[0]=i+n[0].split("\n").join("\n"+i),n.push(s+"m+"+e.exports.humanize(this.diff)+"[0m")}else n[0]=function(){if(t.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+r+" "+n[0]},t.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},t.load=function(){return process.env.DEBUG},t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):r.isatty(process.stderr.fd)},t.colors=[6,2,3,4,5,1];try{var s=n(32);s&&(s.stderr||s).level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}t.inspectOpts=Object.keys(process.env).filter(function(e){return/^debug_/i.test(e)}).reduce(function(e,t){var n=t.substring(6).toLowerCase().replace(/_([a-z])/g,function(e,t){return t.toUpperCase()}),r=process.env[t];return r=!!/^(yes|on|true|enabled)$/i.test(r)||!/^(no|off|false|disabled)$/i.test(r)&&("null"===r?null:Number(r)),e[n]=r,e},{}),e.exports=n(11)(t);var i=e.exports.formatters;i.o=function(e){return this.inspectOpts.colors=this.useColors,o.inspect(e,this.inspectOpts).replace(/\s*\n\s*/g," ")},i.O=function(e){return this.inspectOpts.colors=this.useColors,o.inspect(e,this.inspectOpts)}},,function(e,t,n){"use strict";const r=n(33),o=n(34),{env:s}=process;let i;function c(e){return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(function(e){if(0===i)return 0;if(o("color=16m")||o("color=full")||o("color=truecolor"))return 3;if(o("color=256"))return 2;if(e&&!e.isTTY&&void 0===i)return 0;const t=i||0;if("dumb"===s.TERM)return t;if("win32"===process.platform){const e=r.release().split(".");return Number(process.versions.node.split(".")[0])>=8&&Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if("CI"in s)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some(e=>e in s)||"codeship"===s.CI_NAME?1:t;if("TEAMCITY_VERSION"in s)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(s.TEAMCITY_VERSION)?1:0;if("truecolor"===s.COLORTERM)return 3;if("TERM_PROGRAM"in s){const e=parseInt((s.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(s.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(s.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(s.TERM)?1:"COLORTERM"in s?1:t}(e))}o("no-color")||o("no-colors")||o("color=false")||o("color=never")?i=0:(o("color")||o("colors")||o("color=true")||o("color=always"))&&(i=1),"FORCE_COLOR"in s&&(i=!0===s.FORCE_COLOR||"true"===s.FORCE_COLOR?1:!1===s.FORCE_COLOR||"false"===s.FORCE_COLOR?0:0===s.FORCE_COLOR.length?1:Math.min(parseInt(s.FORCE_COLOR,10),3)),e.exports={supportsColor:c,stdout:c(process.stdout),stderr:c(process.stderr)}},,function(e,t,n){"use strict";e.exports=(e,t)=>{t=t||process.argv;const n=e.startsWith("-")?"":1===e.length?"-":"--",r=t.indexOf(n+e),o=t.indexOf("--");return-1!==r&&(-1===o||r<o)}}];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BZHllblRlcm1pbmFsQXBpLy4vbm9kZV9tb2R1bGVzL2h0dHBzLXByb3h5LWFnZW50L25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvY29tbW9uLmpzIiwid2VicGFjazovL0FkeWVuVGVybWluYWxBcGkvLi9ub2RlX21vZHVsZXMvaHR0cHMtcHJveHktYWdlbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQWR5ZW5UZXJtaW5hbEFwaS8uL25vZGVfbW9kdWxlcy9hZ2VudC1iYXNlL2luZGV4LmpzIiwid2VicGFjazovL0FkeWVuVGVybWluYWxBcGkvLi9ub2RlX21vZHVsZXMvYWdlbnQtYmFzZS9wYXRjaC1jb3JlLmpzIiwid2VicGFjazovL0FkeWVuVGVybWluYWxBcGkvLi9ub2RlX21vZHVsZXMvZXM2LXByb21pc2lmeS9kaXN0L3Byb21pc2lmeS5qcyIsIndlYnBhY2s6Ly9BZHllblRlcm1pbmFsQXBpLy4vbm9kZV9tb2R1bGVzL2VzNi1wcm9taXNpZnkvZGlzdC9wcm9taXNlLmpzIiwid2VicGFjazovL0FkeWVuVGVybWluYWxBcGkvLi9ub2RlX21vZHVsZXMvZXM2LXByb21pc2UvZGlzdC9lczYtcHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9BZHllblRlcm1pbmFsQXBpLy4vbm9kZV9tb2R1bGVzL2h0dHBzLXByb3h5LWFnZW50L25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQWR5ZW5UZXJtaW5hbEFwaS8uL25vZGVfbW9kdWxlcy9odHRwcy1wcm94eS1hZ2VudC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vQWR5ZW5UZXJtaW5hbEFwaS8uL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9BZHllblRlcm1pbmFsQXBpLy4vbm9kZV9tb2R1bGVzL2h0dHBzLXByb3h5LWFnZW50L25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvbm9kZS5qcyIsIndlYnBhY2s6Ly9BZHllblRlcm1pbmFsQXBpLy4vbm9kZV9tb2R1bGVzL3N1cHBvcnRzLWNvbG9yL2luZGV4LmpzIiwid2VicGFjazovL0FkeWVuVGVybWluYWxBcGkvLi9ub2RlX21vZHVsZXMvaGFzLWZsYWcvaW5kZXguanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImVudiIsInNlbGVjdENvbG9yIiwibmFtZXNwYWNlIiwiaGFzaCIsImkiLCJsZW5ndGgiLCJjaGFyQ29kZUF0IiwiY3JlYXRlRGVidWciLCJjb2xvcnMiLCJNYXRoIiwiYWJzIiwicHJldlRpbWUiLCJkZWJ1ZyIsImVuYWJsZWQiLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsInNlbGYiLCJjdXJyIiwiTnVtYmVyIiwiRGF0ZSIsIm1zIiwiZGlmZiIsInByZXYiLCJjb2VyY2UiLCJ1bnNoaWZ0IiwiaW5kZXgiLCJyZXBsYWNlIiwibWF0Y2giLCJmb3JtYXQiLCJmb3JtYXR0ZXIiLCJmb3JtYXR0ZXJzIiwidmFsIiwiY2FsbCIsInNwbGljZSIsImZvcm1hdEFyZ3MiLCJsb2ciLCJhcHBseSIsInVzZUNvbG9ycyIsImNvbG9yIiwiZGVzdHJveSIsImV4dGVuZCIsImluaXQiLCJpbnN0YW5jZXMiLCJwdXNoIiwiaW5kZXhPZiIsInRoaXMiLCJkZWxpbWl0ZXIiLCJkZWZhdWx0IiwiRXJyb3IiLCJzdGFjayIsIm1lc3NhZ2UiLCJkaXNhYmxlIiwiZW5hYmxlIiwibmFtZXNwYWNlcyIsInNhdmUiLCJuYW1lcyIsInNraXBzIiwic3BsaXQiLCJsZW4iLCJSZWdFeHAiLCJzdWJzdHIiLCJpbnN0YW5jZSIsIm5hbWUiLCJ0ZXN0IiwiaHVtYW5pemUiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJsb2FkIiwibmV0IiwidGxzIiwidXJsIiwiYXNzZXJ0IiwiQWdlbnQiLCJpbmhlcml0cyIsIkh0dHBzUHJveHlBZ2VudCIsIm9wdHMiLCJwYXJzZSIsInByb3h5IiwiYXNzaWduIiwic2VjdXJlUHJveHkiLCJwcm90b2NvbCIsImhvc3QiLCJob3N0bmFtZSIsInBvcnQiLCJBTFBOUHJvdG9jb2xzIiwicGF0aCIsInBhdGhuYW1lIiwiZGVmYXVsdFBvcnQiLCJyZXN1bWUiLCJzb2NrZXQiLCJwcm90b3R5cGUiLCJjYWxsYmFjayIsInJlcSIsImZuIiwiY29ubmVjdCIsImJ1ZmZlcnMiLCJidWZmZXJzTGVuZ3RoIiwicmVhZCIsImIiLCJidWZmZXJlZCIsIkJ1ZmZlciIsImNvbmNhdCIsInN0ciIsInRvU3RyaW5nIiwiZmlyc3RMaW5lIiwic3Vic3RyaW5nIiwic3RhdHVzQ29kZSIsInNvY2siLCJzZWN1cmVFbmRwb2ludCIsInNlcnZlcm5hbWUiLCJjbGVhbnVwIiwib25jZSIsIlNvY2tldCIsInJlYWRhYmxlIiwib25zb2NrZXQiLCJvbmRhdGEiLCJyZW1vdmVMaXN0ZW5lciIsIm9uZW5kIiwib25lcnJvciIsIm9uY2xvc2UiLCJlcnIiLCJsaXN0ZW5lckNvdW50Iiwib24iLCJtc2ciLCJoZWFkZXJzIiwiYXV0aCIsImZyb20iLCJzZWN1cmUiLCJCb29sZWFuIiwid3JpdGUiLCJwcm9taXNpZnkiLCJFdmVudEVtaXR0ZXIiLCJfb3B0cyIsIl9wcm9taXNpZmllZENhbGxiYWNrIiwidGltZW91dCIsIm9wdGlvbnMiLCJhZGRSZXF1ZXN0Iiwib3duT3B0cyIsImFnZW50IiwiX2RlZmF1bHRBZ2VudCIsImNyZWF0ZUNvbm5lY3Rpb24iLCJfbGFzdCIsInNob3VsZEtlZXBBbGl2ZSIsInRpbWVkT3V0IiwidGltZW91dE1zIiwiZnJlZVNvY2tldCIsIl9oYWRFcnJvciIsImVtaXQiLCJjYWxsYmFja0Vycm9yIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImNvZGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJ2Iiwib25Tb2NrZXQiLCJtZXRob2QiLCJyZWplY3QiLCJjYXRjaCIsImh0dHBzIiwicGF0Y2hNYXJrZXIiLCJyZXF1ZXN0IiwiX29wdGlvbnMiLCJjYiIsImdldCIsIl91cmwiLCJlbmQiLCJFUzZQcm9taXNlIiwidGhhdExvb2tzTGlrZUFQcm9taXNlVG9NZSIsIm8iLCJvcmlnaW5hbCIsInNldHRpbmdzIiwicmV0dXJuTXVsdGlwbGVBcmd1bWVudHMiLCJtdWx0aUFyZ3MiLCJ0YXJnZXQiLCJ0aGlzQXJnIiwiX2xlbjIiLCJ2YWx1ZXMiLCJfa2V5MiIsInJlc3BvbnNlIiwiZ2xvYmFsT2JqZWN0IiwidW5kZWZpbmVkIiwiZ2xvYmFsIiwid2luZG93IiwiZG9jdW1lbnQiLCJoYXNPd25Qcm9wZXJ0eSIsIlAiLCJyIiwiZmFjdG9yeSIsImlzRnVuY3Rpb24iLCJ4IiwiaXNBcnJheSIsInZlcnR4TmV4dCIsImN1c3RvbVNjaGVkdWxlckZuIiwiYXNhcCIsImFyZyIsInF1ZXVlIiwiZmx1c2giLCJzY2hlZHVsZUZsdXNoIiwiYnJvd3NlcldpbmRvdyIsImJyb3dzZXJHbG9iYWwiLCJCcm93c2VyTXV0YXRpb25PYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiaXNOb2RlIiwicHJvY2VzcyIsImlzV29ya2VyIiwiVWludDhDbGFtcGVkQXJyYXkiLCJpbXBvcnRTY3JpcHRzIiwiTWVzc2FnZUNoYW5uZWwiLCJ1c2VTZXRUaW1lb3V0IiwiZ2xvYmFsU2V0VGltZW91dCIsImNoYW5uZWwiLCJpdGVyYXRpb25zIiwib2JzZXJ2ZXIiLCJub2RlIiwib25GdWxmaWxsbWVudCIsIm9uUmVqZWN0aW9uIiwicGFyZW50IiwiY2hpbGQiLCJjb25zdHJ1Y3RvciIsIm5vb3AiLCJQUk9NSVNFX0lEIiwibWFrZVByb21pc2UiLCJfc3RhdGUiLCJpbnZva2VDYWxsYmFjayIsIl9yZXN1bHQiLCJzdWJzY3JpYmUiLCJyZXNvbHZlJDEiLCJvYmplY3QiLCJwcm9taXNlIiwibmV4dFRpY2siLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwiZGF0YSIsInBvcnQxIiwib25tZXNzYWdlIiwicG9ydDIiLCJwb3N0TWVzc2FnZSIsInZlcnR4IiwiRnVuY3Rpb24iLCJyZXF1aXJlIiwicnVuT25Mb29wIiwicnVuT25Db250ZXh0IiwiZSIsImF0dGVtcHRWZXJ0eCIsInJhbmRvbSIsIlBFTkRJTkciLCJGVUxGSUxMRUQiLCJSRUpFQ1RFRCIsImhhbmRsZU1heWJlVGhlbmFibGUiLCJtYXliZVRoZW5hYmxlIiwidGhlbiQkMSIsInRoZW5hYmxlIiwiZnVsZmlsbCIsInZhbHVlIiwicmVhc29uIiwiaGFuZGxlT3duVGhlbmFibGUiLCJzZWFsZWQiLCJlcnJvciIsImZ1bGZpbGxtZW50SGFuZGxlciIsInJlamVjdGlvbkhhbmRsZXIiLCJ0cnlUaGVuIiwiX2xhYmVsIiwiaGFuZGxlRm9yZWlnblRoZW5hYmxlIiwiVHlwZUVycm9yIiwidHlwZSIsInB1Ymxpc2hSZWplY3Rpb24iLCJfb25lcnJvciIsInB1Ymxpc2giLCJfc3Vic2NyaWJlcnMiLCJzdWJzY3JpYmVycyIsInNldHRsZWQiLCJkZXRhaWwiLCJoYXNDYWxsYmFjayIsInN1Y2NlZWRlZCIsImlkIiwiRW51bWVyYXRvciIsIkNvbnN0cnVjdG9yIiwiaW5wdXQiLCJfaW5zdGFuY2VDb25zdHJ1Y3RvciIsIl9yZW1haW5pbmciLCJfZW51bWVyYXRlIiwiX2VhY2hFbnRyeSIsImVudHJ5IiwiYyIsInJlc29sdmUkJDEiLCJfdGhlbiIsImRpZEVycm9yIiwiX3NldHRsZWRBdCIsIlByb21pc2UkMSIsIl93aWxsU2V0dGxlQXQiLCJzdGF0ZSIsImVudW1lcmF0b3IiLCJyZXNvbHZlciIsIm5lZWRzUmVzb2x2ZXIiLCJpbml0aWFsaXplUHJvbWlzZSIsIm5lZWRzTmV3IiwiZmluYWxseSIsImFsbCIsImVudHJpZXMiLCJyYWNlIiwiXyIsIl9zZXRTY2hlZHVsZXIiLCJzY2hlZHVsZUZuIiwiX3NldEFzYXAiLCJhc2FwRm4iLCJfYXNhcCIsInBvbHlmaWxsIiwibG9jYWwiLCJwcm9taXNlVG9TdHJpbmciLCJjYXN0IiwiYnJvd3NlciIsIl9fbndqcyIsIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9jb25zb2xlIiwiY29uc29sZSIsImxhc3RDIiwic3RvcmFnZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiZ2V0SXRlbSIsIkRFQlVHIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidG9Mb3dlckNhc2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzdHlsZSIsIldlYmtpdEFwcGVhcmFuY2UiLCJmaXJlYnVnIiwiZXhjZXB0aW9uIiwidGFibGUiLCJwYXJzZUludCIsIiQxIiwibG9jYWxTdG9yYWdlIiwibG9jYWxzdG9yYWdlIiwiaiIsIkpTT04iLCJzdHJpbmdpZnkiLCJzIiwibSIsImgiLCJkIiwidyIsInkiLCJwbHVyYWwiLCJtc0FicyIsIm4iLCJpc1BsdXJhbCIsInJvdW5kIiwiU3RyaW5nIiwiZXhlYyIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsImxvbmciLCJmbXRMb25nIiwiZm10U2hvcnQiLCJ0dHkiLCJ1dGlsIiwiaW5zcGVjdE9wdHMiLCJzdGRlcnIiLCJjb2xvckNvZGUiLCJwcmVmaXgiLCJqb2luIiwiaGlkZURhdGUiLCJ0b0lTT1N0cmluZyIsImdldERhdGUiLCJpc2F0dHkiLCJmZCIsInN1cHBvcnRzQ29sb3IiLCJsZXZlbCIsImZpbHRlciIsInJlZHVjZSIsInByb3AiLCJrIiwidG9VcHBlckNhc2UiLCJpbnNwZWN0IiwiTyIsIm9zIiwiaGFzRmxhZyIsImZvcmNlQ29sb3IiLCJnZXRTdXBwb3J0TGV2ZWwiLCJzdHJlYW0iLCJoYXNCYXNpYyIsImhhczI1NiIsImhhczE2bSIsInRyYW5zbGF0ZUxldmVsIiwiaXNUVFkiLCJtaW4iLCJURVJNIiwicGxhdGZvcm0iLCJvc1JlbGVhc2UiLCJyZWxlYXNlIiwidmVyc2lvbnMiLCJzb21lIiwic2lnbiIsIkNJX05BTUUiLCJURUFNQ0lUWV9WRVJTSU9OIiwiQ09MT1JURVJNIiwidmVyc2lvbiIsIlRFUk1fUFJPR1JBTV9WRVJTSU9OIiwiVEVSTV9QUk9HUkFNIiwiRk9SQ0VfQ09MT1IiLCJz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LEdBS1YsTUFBSSxpQkFBaUJ4VixLQUFLbEUsRUFBSWdaLE1BQ3RCLEVBR0osOERBQThEOVUsS0FBS2xFLEVBQUlnWixNQUNuRSxFQUdKLGNBQWVoWixFQUNYLEVBR0QrWSxFQUlPbkIsQ0FBY2EsSUExSHpCSCxFQUFRLGFBQ1hBLEVBQVEsY0FDUkEsRUFBUSxnQkFDUkEsRUFBUSxlQUNSQyxFQUFhLEdBQ0hELEVBQVEsVUFDbEJBLEVBQVEsV0FDUkEsRUFBUSxlQUNSQSxFQUFRLG1CQUNSQyxFQUFhLEdBRVYsZ0JBQWlCdlksSUFFbkJ1WSxHQUR1QixJQUFwQnZZLEVBQUk2WixhQUE0QyxTQUFwQjdaLEVBQUk2WixZQUN0QixHQUNpQixJQUFwQjdaLEVBQUk2WixhQUE2QyxVQUFwQjdaLEVBQUk2WixZQUM5QixFQUUyQixJQUEzQjdaLEVBQUk2WixZQUFZeFosT0FBZSxFQUFJSSxLQUFLc1ksSUFBSXhELFNBQVN2VixFQUFJNlosWUFBYSxJQUFLLElBNkcxRi9aLEVBQU9DLFFBQVUsQ0FDaEI2WCxjQUFlWSxFQUNmc0IsT0FBUXRCLEVBQWdCcEwsUUFBUTBNLFFBQ2hDM0MsT0FBUXFCLEVBQWdCcEwsUUFBUStKLFUsOEJDdklqQ3JYLEVBQU9DLFFBQVUsQ0FBQ2dhLEVBQU1DLEtBQ3ZCQSxFQUFPQSxHQUFRNU0sUUFBUTRNLEtBQ3ZCLE1BQU0zQyxFQUFTMEMsRUFBS0UsV0FBVyxLQUFPLEdBQXNCLElBQWhCRixFQUFLMVosT0FBZSxJQUFNLEtBQ2hFNlosRUFBTUYsRUFBS2pYLFFBQVFzVSxFQUFTMEMsR0FDNUJJLEVBQWdCSCxFQUFLalgsUUFBUSxNQUNuQyxPQUFnQixJQUFUbVgsS0FBa0MsSUFBbkJDLEdBQThCRCxFQUFNQyIsImZpbGUiOiJ2ZW5kb3Jzfm1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICovXG5mdW5jdGlvbiBzZXR1cChlbnYpIHtcbiAgY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1ZztcbiAgY3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuICBjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG4gIGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuICBjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG4gIGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuICBjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG4gIE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgY3JlYXRlRGVidWdba2V5XSA9IGVudltrZXldO1xuICB9KTtcbiAgLyoqXG4gICogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuICAqL1xuXG4gIGNyZWF0ZURlYnVnLmluc3RhbmNlcyA9IFtdO1xuICAvKipcbiAgKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAgKi9cblxuICBjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuICBjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuICAvKipcbiAgKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gICpcbiAgKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gICovXG5cbiAgY3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuICAvKipcbiAgKiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG4gICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGZvciB0aGUgZGVidWcgaW5zdGFuY2UgdG8gYmUgY29sb3JlZFxuICAqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IEFuIEFOU0kgY29sb3IgY29kZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZVxuICAqIEBhcGkgcHJpdmF0ZVxuICAqL1xuXG4gIGZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICAgIHZhciBoYXNoID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXNwYWNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVEZWJ1Zy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBjcmVhdGVEZWJ1Zy5jb2xvcnMubGVuZ3RoXTtcbiAgfVxuXG4gIGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yID0gc2VsZWN0Q29sb3I7XG4gIC8qKlxuICAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuICAqXG4gICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAqIEBhcGkgcHVibGljXG4gICovXG5cbiAgZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG4gICAgdmFyIHByZXZUaW1lO1xuXG4gICAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgICAvLyBEaXNhYmxlZD9cbiAgICAgIGlmICghZGVidWcuZW5hYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VsZiA9IGRlYnVnOyAvLyBTZXQgYGRpZmZgIHRpbWVzdGFtcFxuXG4gICAgICB2YXIgY3VyciA9IE51bWJlcihuZXcgRGF0ZSgpKTtcbiAgICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgICBzZWxmLmRpZmYgPSBtcztcbiAgICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICAgIHByZXZUaW1lID0gY3VycjtcbiAgICAgIGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICAgIGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gQW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgICAgfSAvLyBBcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuXG5cbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24gKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgICAgLy8gSWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgICBpZiAobWF0Y2ggPT09ICclJScpIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleCsrO1xuICAgICAgICB2YXIgZm9ybWF0dGVyID0gY3JlYXRlRGVidWcuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTsgLy8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXG4gICAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIGluZGV4LS07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTsgLy8gQXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcblxuICAgICAgY3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuICAgICAgdmFyIGxvZ0ZuID0gc2VsZi5sb2cgfHwgY3JlYXRlRGVidWcubG9nO1xuICAgICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuXG4gICAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICAgIGRlYnVnLmVuYWJsZWQgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gICAgZGVidWcudXNlQ29sb3JzID0gY3JlYXRlRGVidWcudXNlQ29sb3JzKCk7XG4gICAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuICAgIGRlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuICAgIGRlYnVnLmV4dGVuZCA9IGV4dGVuZDsgLy8gRGVidWcuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG4gICAgLy8gZGVidWcucmF3TG9nID0gcmF3TG9nO1xuICAgIC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG5cbiAgICBpZiAodHlwZW9mIGNyZWF0ZURlYnVnLmluaXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNyZWF0ZURlYnVnLmluaXQoZGVidWcpO1xuICAgIH1cblxuICAgIGNyZWF0ZURlYnVnLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcbiAgICByZXR1cm4gZGVidWc7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHZhciBpbmRleCA9IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgY3JlYXRlRGVidWcuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcbiAgICByZXR1cm4gY3JlYXRlRGVidWcodGhpcy5uYW1lc3BhY2UgKyAodHlwZW9mIGRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyAnOicgOiBkZWxpbWl0ZXIpICsgbmFtZXNwYWNlKTtcbiAgfVxuICAvKipcbiAgKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAgKlxuICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gICogQGFwaSBwdWJsaWNcbiAgKi9cblxuXG4gIGZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gICAgY3JlYXRlRGVidWcuc2F2ZShuYW1lc3BhY2VzKTtcbiAgICBjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuICAgIGNyZWF0ZURlYnVnLnNraXBzID0gW107XG4gICAgdmFyIGk7XG4gICAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoIXNwbGl0W2ldKSB7XG4gICAgICAgIC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcblxuICAgICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgICBjcmVhdGVEZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyZWF0ZURlYnVnLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGluc3RhbmNlID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzW2ldO1xuICAgICAgaW5zdGFuY2UuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gICpcbiAgKiBAYXBpIHB1YmxpY1xuICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBjcmVhdGVEZWJ1Zy5lbmFibGUoJycpO1xuICB9XG4gIC8qKlxuICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgKlxuICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICogQHJldHVybiB7Qm9vbGVhbn1cbiAgKiBAYXBpIHB1YmxpY1xuICAqL1xuXG5cbiAgZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gICAgaWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuXG4gICAgZm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChjcmVhdGVEZWJ1Zy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKGNyZWF0ZURlYnVnLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAqIENvZXJjZSBgdmFsYC5cbiAgKlxuICAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICAqIEByZXR1cm4ge01peGVkfVxuICAqIEBhcGkgcHJpdmF0ZVxuICAqL1xuXG5cbiAgZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICAgIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgY3JlYXRlRGVidWcuZW5hYmxlKGNyZWF0ZURlYnVnLmxvYWQoKSk7XG4gIHJldHVybiBjcmVhdGVEZWJ1Zztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXR1cDtcblxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBuZXQgPSByZXF1aXJlKCduZXQnKTtcbnZhciB0bHMgPSByZXF1aXJlKCd0bHMnKTtcbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBBZ2VudCA9IHJlcXVpcmUoJ2FnZW50LWJhc2UnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ3V0aWwnKS5pbmhlcml0cztcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2h0dHBzLXByb3h5LWFnZW50Jyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBIdHRwc1Byb3h5QWdlbnQ7XG5cbi8qKlxuICogVGhlIGBIdHRwc1Byb3h5QWdlbnRgIGltcGxlbWVudHMgYW4gSFRUUCBBZ2VudCBzdWJjbGFzcyB0aGF0IGNvbm5lY3RzIHRvIHRoZVxuICogc3BlY2lmaWVkIFwiSFRUUChzKSBwcm94eSBzZXJ2ZXJcIiBpbiBvcmRlciB0byBwcm94eSBIVFRQUyByZXF1ZXN0cy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEh0dHBzUHJveHlBZ2VudChvcHRzKSB7XG5cdGlmICghKHRoaXMgaW5zdGFuY2VvZiBIdHRwc1Byb3h5QWdlbnQpKSByZXR1cm4gbmV3IEh0dHBzUHJveHlBZ2VudChvcHRzKTtcblx0aWYgKCdzdHJpbmcnID09IHR5cGVvZiBvcHRzKSBvcHRzID0gdXJsLnBhcnNlKG9wdHMpO1xuXHRpZiAoIW9wdHMpXG5cdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0J2FuIEhUVFAoUykgcHJveHkgc2VydmVyIGBob3N0YCBhbmQgYHBvcnRgIG11c3QgYmUgc3BlY2lmaWVkISdcblx0XHQpO1xuXHRkZWJ1ZygnY3JlYXRpbmcgbmV3IEh0dHBzUHJveHlBZ2VudCBpbnN0YW5jZTogJW8nLCBvcHRzKTtcblx0QWdlbnQuY2FsbCh0aGlzLCBvcHRzKTtcblxuXHR2YXIgcHJveHkgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRzKTtcblxuXHQvLyBpZiBgdHJ1ZWAsIHRoZW4gY29ubmVjdCB0byB0aGUgcHJveHkgc2VydmVyIG92ZXIgVExTLiBkZWZhdWx0cyB0byBgZmFsc2VgLlxuXHR0aGlzLnNlY3VyZVByb3h5ID0gcHJveHkucHJvdG9jb2xcblx0XHQ/IC9eaHR0cHM6PyQvaS50ZXN0KHByb3h5LnByb3RvY29sKVxuXHRcdDogZmFsc2U7XG5cblx0Ly8gcHJlZmVyIGBob3N0bmFtZWAgb3ZlciBgaG9zdGAsIGFuZCBzZXQgdGhlIGBwb3J0YCBpZiBuZWVkZWRcblx0cHJveHkuaG9zdCA9IHByb3h5Lmhvc3RuYW1lIHx8IHByb3h5Lmhvc3Q7XG5cdHByb3h5LnBvcnQgPSArcHJveHkucG9ydCB8fCAodGhpcy5zZWN1cmVQcm94eSA/IDQ0MyA6IDgwKTtcblxuXHQvLyBBTFBOIGlzIHN1cHBvcnRlZCBieSBOb2RlLmpzID49IHY1LlxuXHQvLyBhdHRlbXB0IHRvIG5lZ290aWF0ZSBodHRwLzEuMSBmb3IgcHJveHkgc2VydmVycyB0aGF0IHN1cHBvcnQgaHR0cC8yXG5cdGlmICh0aGlzLnNlY3VyZVByb3h5ICYmICEoJ0FMUE5Qcm90b2NvbHMnIGluIHByb3h5KSkge1xuXHRcdHByb3h5LkFMUE5Qcm90b2NvbHMgPSBbJ2h0dHAgMS4xJ107XG5cdH1cblxuXHRpZiAocHJveHkuaG9zdCAmJiBwcm94eS5wYXRoKSB7XG5cdFx0Ly8gaWYgYm90aCBhIGBob3N0YCBhbmQgYHBhdGhgIGFyZSBzcGVjaWZpZWQgdGhlbiBpdCdzIG1vc3QgbGlrZWx5IHRoZVxuXHRcdC8vIHJlc3VsdCBvZiBhIGB1cmwucGFyc2UoKWAgY2FsbC4uLiB3ZSBuZWVkIHRvIHJlbW92ZSB0aGUgYHBhdGhgIHBvcnRpb24gc29cblx0XHQvLyB0aGF0IGBuZXQuY29ubmVjdCgpYCBkb2Vzbid0IGF0dGVtcHQgdG8gb3BlbiB0aGF0IGFzIGEgdW5peCBzb2NrZXQgZmlsZS5cblx0XHRkZWxldGUgcHJveHkucGF0aDtcblx0XHRkZWxldGUgcHJveHkucGF0aG5hbWU7XG5cdH1cblxuXHR0aGlzLnByb3h5ID0gcHJveHk7XG5cdHRoaXMuZGVmYXVsdFBvcnQgPSA0NDM7XG59XG5pbmhlcml0cyhIdHRwc1Byb3h5QWdlbnQsIEFnZW50KTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiB0aGUgbm9kZS1jb3JlIEhUVFAgY2xpZW50IGxpYnJhcnkgaXMgY3JlYXRpbmcgYSBuZXcgSFRUUCByZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuSHR0cHNQcm94eUFnZW50LnByb3RvdHlwZS5jYWxsYmFjayA9IGZ1bmN0aW9uIGNvbm5lY3QocmVxLCBvcHRzLCBmbikge1xuXHR2YXIgcHJveHkgPSB0aGlzLnByb3h5O1xuXG5cdC8vIGNyZWF0ZSBhIHNvY2tldCBjb25uZWN0aW9uIHRvIHRoZSBwcm94eSBzZXJ2ZXJcblx0dmFyIHNvY2tldDtcblx0aWYgKHRoaXMuc2VjdXJlUHJveHkpIHtcblx0XHRzb2NrZXQgPSB0bHMuY29ubmVjdChwcm94eSk7XG5cdH0gZWxzZSB7XG5cdFx0c29ja2V0ID0gbmV0LmNvbm5lY3QocHJveHkpO1xuXHR9XG5cblx0Ly8gd2UgbmVlZCB0byBidWZmZXIgYW55IEhUVFAgdHJhZmZpYyB0aGF0IGhhcHBlbnMgd2l0aCB0aGUgcHJveHkgYmVmb3JlIHdlIGdldFxuXHQvLyB0aGUgQ09OTkVDVCByZXNwb25zZSwgc28gdGhhdCBpZiB0aGUgcmVzcG9uc2UgaXMgYW55dGhpbmcgb3RoZXIgdGhhbiBhbiBcIjIwMFwiXG5cdC8vIHJlc3BvbnNlIGNvZGUsIHRoZW4gd2UgY2FuIHJlLXBsYXkgdGhlIFwiZGF0YVwiIGV2ZW50cyBvbiB0aGUgc29ja2V0IG9uY2UgdGhlXG5cdC8vIEhUVFAgcGFyc2VyIGlzIGhvb2tlZCB1cC4uLlxuXHR2YXIgYnVmZmVycyA9IFtdO1xuXHR2YXIgYnVmZmVyc0xlbmd0aCA9IDA7XG5cblx0ZnVuY3Rpb24gcmVhZCgpIHtcblx0XHR2YXIgYiA9IHNvY2tldC5yZWFkKCk7XG5cdFx0aWYgKGIpIG9uZGF0YShiKTtcblx0XHRlbHNlIHNvY2tldC5vbmNlKCdyZWFkYWJsZScsIHJlYWQpO1xuXHR9XG5cblx0ZnVuY3Rpb24gY2xlYW51cCgpIHtcblx0XHRzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcblx0XHRzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG5cdFx0c29ja2V0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuXHRcdHNvY2tldC5yZW1vdmVMaXN0ZW5lcigncmVhZGFibGUnLCByZWFkKTtcblx0fVxuXG5cdGZ1bmN0aW9uIG9uY2xvc2UoZXJyKSB7XG5cdFx0ZGVidWcoJ29uY2xvc2UgaGFkIGVycm9yICVvJywgZXJyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIG9uZW5kKCkge1xuXHRcdGRlYnVnKCdvbmVuZCcpO1xuXHR9XG5cblx0ZnVuY3Rpb24gb25lcnJvcihlcnIpIHtcblx0XHRjbGVhbnVwKCk7XG5cdFx0Zm4oZXJyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIG9uZGF0YShiKSB7XG5cdFx0YnVmZmVycy5wdXNoKGIpO1xuXHRcdGJ1ZmZlcnNMZW5ndGggKz0gYi5sZW5ndGg7XG5cdFx0dmFyIGJ1ZmZlcmVkID0gQnVmZmVyLmNvbmNhdChidWZmZXJzLCBidWZmZXJzTGVuZ3RoKTtcblx0XHR2YXIgc3RyID0gYnVmZmVyZWQudG9TdHJpbmcoJ2FzY2lpJyk7XG5cblx0XHRpZiAoIX5zdHIuaW5kZXhPZignXFxyXFxuXFxyXFxuJykpIHtcblx0XHRcdC8vIGtlZXAgYnVmZmVyaW5nXG5cdFx0XHRkZWJ1ZygnaGF2ZSBub3QgcmVjZWl2ZWQgZW5kIG9mIEhUVFAgaGVhZGVycyB5ZXQuLi4nKTtcblx0XHRcdHJlYWQoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZmlyc3RMaW5lID0gc3RyLnN1YnN0cmluZygwLCBzdHIuaW5kZXhPZignXFxyXFxuJykpO1xuXHRcdHZhciBzdGF0dXNDb2RlID0gK2ZpcnN0TGluZS5zcGxpdCgnICcpWzFdO1xuXHRcdGRlYnVnKCdnb3QgcHJveHkgc2VydmVyIHJlc3BvbnNlOiAlbycsIGZpcnN0TGluZSk7XG5cblx0XHRpZiAoMjAwID09IHN0YXR1c0NvZGUpIHtcblx0XHRcdC8vIDIwMCBDb25uZWN0ZWQgc3RhdHVzIGNvZGUhXG5cdFx0XHR2YXIgc29jayA9IHNvY2tldDtcblxuXHRcdFx0Ly8gbnVsbGlmeSB0aGUgYnVmZmVyZWQgZGF0YSBzaW5jZSB3ZSB3b24ndCBiZSBuZWVkaW5nIGl0XG5cdFx0XHRidWZmZXJzID0gYnVmZmVyZWQgPSBudWxsO1xuXG5cdFx0XHRpZiAob3B0cy5zZWN1cmVFbmRwb2ludCkge1xuXHRcdFx0XHQvLyBzaW5jZSB0aGUgcHJveHkgaXMgY29ubmVjdGluZyB0byBhbiBTU0wgc2VydmVyLCB3ZSBoYXZlXG5cdFx0XHRcdC8vIHRvIHVwZ3JhZGUgdGhpcyBzb2NrZXQgY29ubmVjdGlvbiB0byBhbiBTU0wgY29ubmVjdGlvblxuXHRcdFx0XHRkZWJ1Zyhcblx0XHRcdFx0XHQndXBncmFkaW5nIHByb3h5LWNvbm5lY3RlZCBzb2NrZXQgdG8gVExTIGNvbm5lY3Rpb246ICVvJyxcblx0XHRcdFx0XHRvcHRzLmhvc3Rcblx0XHRcdFx0KTtcblx0XHRcdFx0b3B0cy5zb2NrZXQgPSBzb2NrZXQ7XG5cdFx0XHRcdG9wdHMuc2VydmVybmFtZSA9IG9wdHMuc2VydmVybmFtZSB8fCBvcHRzLmhvc3Q7XG5cdFx0XHRcdG9wdHMuaG9zdCA9IG51bGw7XG5cdFx0XHRcdG9wdHMuaG9zdG5hbWUgPSBudWxsO1xuXHRcdFx0XHRvcHRzLnBvcnQgPSBudWxsO1xuXHRcdFx0XHRzb2NrID0gdGxzLmNvbm5lY3Qob3B0cyk7XG5cdFx0XHR9XG5cblx0XHRcdGNsZWFudXAoKTtcblx0XHRcdHJlcS5vbmNlKCdzb2NrZXQnLCByZXN1bWUpO1xuXHRcdFx0Zm4obnVsbCwgc29jayk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHNvbWUgb3RoZXIgc3RhdHVzIGNvZGUgdGhhdCdzIG5vdCAyMDAuLi4gbmVlZCB0byByZS1wbGF5IHRoZSBIVFRQIGhlYWRlclxuXHRcdFx0Ly8gXCJkYXRhXCIgZXZlbnRzIG9udG8gdGhlIHNvY2tldCBvbmNlIHRoZSBIVFRQIG1hY2hpbmVyeSBpcyBhdHRhY2hlZCBzb1xuXHRcdFx0Ly8gdGhhdCB0aGUgbm9kZSBjb3JlIGBodHRwYCBjYW4gcGFyc2UgYW5kIGhhbmRsZSB0aGUgZXJyb3Igc3RhdHVzIGNvZGVcblx0XHRcdGNsZWFudXAoKTtcblxuXHRcdFx0Ly8gdGhlIG9yaWdpbmFsIHNvY2tldCBpcyBjbG9zZWQsIGFuZCBhIG5ldyBjbG9zZWQgc29ja2V0IGlzXG5cdFx0XHQvLyByZXR1cm5lZCBpbnN0ZWFkLCBzbyB0aGF0IHRoZSBwcm94eSBkb2Vzbid0IGdldCB0aGUgSFRUUCByZXF1ZXN0XG5cdFx0XHQvLyB3cml0dGVuIHRvIGl0ICh3aGljaCBtYXkgY29udGFpbiBgQXV0aG9yaXphdGlvbmAgaGVhZGVycyBvciBvdGhlclxuXHRcdFx0Ly8gc2Vuc2l0aXZlIGRhdGEpLlxuXHRcdFx0Ly9cblx0XHRcdC8vIFNlZTogaHR0cHM6Ly9oYWNrZXJvbmUuY29tL3JlcG9ydHMvNTQxNTAyXG5cdFx0XHRzb2NrZXQuZGVzdHJveSgpO1xuXHRcdFx0c29ja2V0ID0gbmV3IG5ldC5Tb2NrZXQoKTtcblx0XHRcdHNvY2tldC5yZWFkYWJsZSA9IHRydWU7XG5cblxuXHRcdFx0Ly8gc2F2ZSBhIHJlZmVyZW5jZSB0byB0aGUgY29uY2F0J2QgQnVmZmVyIGZvciB0aGUgYG9uc29ja2V0YCBjYWxsYmFja1xuXHRcdFx0YnVmZmVycyA9IGJ1ZmZlcmVkO1xuXG5cdFx0XHQvLyBuZWVkIHRvIHdhaXQgZm9yIHRoZSBcInNvY2tldFwiIGV2ZW50IHRvIHJlLXBsYXkgdGhlIFwiZGF0YVwiIGV2ZW50c1xuXHRcdFx0cmVxLm9uY2UoJ3NvY2tldCcsIG9uc29ja2V0KTtcblxuXHRcdFx0Zm4obnVsbCwgc29ja2V0KTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBvbnNvY2tldChzb2NrZXQpIHtcblx0XHRkZWJ1ZygncmVwbGF5aW5nIHByb3h5IGJ1ZmZlciBmb3IgZmFpbGVkIHJlcXVlc3QnKTtcblx0XHRhc3NlcnQoc29ja2V0Lmxpc3RlbmVyQ291bnQoJ2RhdGEnKSA+IDApO1xuXG5cdFx0Ly8gcmVwbGF5IHRoZSBcImJ1ZmZlcnNcIiBCdWZmZXIgb250byB0aGUgYHNvY2tldGAsIHNpbmNlIGF0IHRoaXMgcG9pbnRcblx0XHQvLyB0aGUgSFRUUCBtb2R1bGUgbWFjaGluZXJ5IGhhcyBiZWVuIGhvb2tlZCB1cCBmb3IgdGhlIHVzZXJcblx0XHRzb2NrZXQucHVzaChidWZmZXJzKTtcblxuXHRcdC8vIG51bGxpZnkgdGhlIGNhY2hlZCBCdWZmZXIgaW5zdGFuY2Vcblx0XHRidWZmZXJzID0gbnVsbDtcblx0fVxuXG5cdHNvY2tldC5vbignZXJyb3InLCBvbmVycm9yKTtcblx0c29ja2V0Lm9uKCdjbG9zZScsIG9uY2xvc2UpO1xuXHRzb2NrZXQub24oJ2VuZCcsIG9uZW5kKTtcblxuXHRyZWFkKCk7XG5cblx0dmFyIGhvc3RuYW1lID0gb3B0cy5ob3N0ICsgJzonICsgb3B0cy5wb3J0O1xuXHR2YXIgbXNnID0gJ0NPTk5FQ1QgJyArIGhvc3RuYW1lICsgJyBIVFRQLzEuMVxcclxcbic7XG5cblx0dmFyIGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCBwcm94eS5oZWFkZXJzKTtcblx0aWYgKHByb3h5LmF1dGgpIHtcblx0XHRoZWFkZXJzWydQcm94eS1BdXRob3JpemF0aW9uJ10gPVxuXHRcdFx0J0Jhc2ljICcgKyBCdWZmZXIuZnJvbShwcm94eS5hdXRoKS50b1N0cmluZygnYmFzZTY0Jyk7XG5cdH1cblxuXHQvLyB0aGUgSG9zdCBoZWFkZXIgc2hvdWxkIG9ubHkgaW5jbHVkZSB0aGUgcG9ydFxuXHQvLyBudW1iZXIgd2hlbiBpdCBpcyBhIG5vbi1zdGFuZGFyZCBwb3J0XG5cdHZhciBob3N0ID0gb3B0cy5ob3N0O1xuXHRpZiAoIWlzRGVmYXVsdFBvcnQob3B0cy5wb3J0LCBvcHRzLnNlY3VyZUVuZHBvaW50KSkge1xuXHRcdGhvc3QgKz0gJzonICsgb3B0cy5wb3J0O1xuXHR9XG5cdGhlYWRlcnNbJ0hvc3QnXSA9IGhvc3Q7XG5cblx0aGVhZGVyc1snQ29ubmVjdGlvbiddID0gJ2Nsb3NlJztcblx0T2JqZWN0LmtleXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG5cdFx0bXNnICs9IG5hbWUgKyAnOiAnICsgaGVhZGVyc1tuYW1lXSArICdcXHJcXG4nO1xuXHR9KTtcblxuXHRzb2NrZXQud3JpdGUobXNnICsgJ1xcclxcbicpO1xufTtcblxuLyoqXG4gKiBSZXN1bWVzIGEgc29ja2V0LlxuICpcbiAqIEBwYXJhbSB7KG5ldC5Tb2NrZXR8dGxzLlNvY2tldCl9IHNvY2tldCBUaGUgc29ja2V0IHRvIHJlc3VtZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiByZXN1bWUoc29ja2V0KSB7XG5cdHNvY2tldC5yZXN1bWUoKTtcbn1cblxuZnVuY3Rpb24gaXNEZWZhdWx0UG9ydChwb3J0LCBzZWN1cmUpIHtcblx0cmV0dXJuIEJvb2xlYW4oKCFzZWN1cmUgJiYgcG9ydCA9PT0gODApIHx8IChzZWN1cmUgJiYgcG9ydCA9PT0gNDQzKSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL3BhdGNoLWNvcmUnKTtcbmNvbnN0IGluaGVyaXRzID0gcmVxdWlyZSgndXRpbCcpLmluaGVyaXRzO1xuY29uc3QgcHJvbWlzaWZ5ID0gcmVxdWlyZSgnZXM2LXByb21pc2lmeScpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFnZW50O1xuXG5mdW5jdGlvbiBpc0FnZW50KHYpIHtcbiAgcmV0dXJuIHYgJiYgdHlwZW9mIHYuYWRkUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqXG4gKiBCYXNlIGBodHRwLkFnZW50YCBpbXBsZW1lbnRhdGlvbi5cbiAqIE5vIHBvb2xpbmcva2VlcC1hbGl2ZSBpcyBpbXBsZW1lbnRlZCBieSBkZWZhdWx0LlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBBZ2VudChjYWxsYmFjaywgX29wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEFnZW50KSkge1xuICAgIHJldHVybiBuZXcgQWdlbnQoY2FsbGJhY2ssIF9vcHRzKTtcbiAgfVxuXG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIC8vIFRoZSBjYWxsYmFjayBnZXRzIHByb21pc2lmaWVkIGlmIGl0IGhhcyAzIHBhcmFtZXRlcnNcbiAgLy8gKGkuZS4gaXQgaGFzIGEgY2FsbGJhY2sgZnVuY3Rpb24pIGxhemlseVxuICB0aGlzLl9wcm9taXNpZmllZENhbGxiYWNrID0gZmFsc2U7XG5cbiAgbGV0IG9wdHMgPSBfb3B0cztcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBjYWxsYmFjaykge1xuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgIG9wdHMgPSBjYWxsYmFjaztcbiAgfVxuXG4gIC8vIHRpbWVvdXQgZm9yIHRoZSBzb2NrZXQgdG8gYmUgcmV0dXJuZWQgZnJvbSB0aGUgY2FsbGJhY2tcbiAgdGhpcy50aW1lb3V0ID0gKG9wdHMgJiYgb3B0cy50aW1lb3V0KSB8fCBudWxsO1xuXG4gIHRoaXMub3B0aW9ucyA9IG9wdHM7XG59XG5pbmhlcml0cyhBZ2VudCwgRXZlbnRFbWl0dGVyKTtcblxuLyoqXG4gKiBPdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIHlvdXIgc3ViY2xhc3MhXG4gKi9cbkFnZW50LnByb3RvdHlwZS5jYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKHJlcSwgb3B0cykge1xuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ1wiYWdlbnQtYmFzZVwiIGhhcyBubyBkZWZhdWx0IGltcGxlbWVudGF0aW9uLCB5b3UgbXVzdCBzdWJjbGFzcyBhbmQgb3ZlcnJpZGUgYGNhbGxiYWNrKClgJ1xuICApO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgYnkgbm9kZS1jb3JlJ3MgXCJfaHR0cF9jbGllbnQuanNcIiBtb2R1bGUgd2hlbiBjcmVhdGluZ1xuICogYSBuZXcgSFRUUCByZXF1ZXN0IHdpdGggdGhpcyBBZ2VudCBpbnN0YW5jZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5BZ2VudC5wcm90b3R5cGUuYWRkUmVxdWVzdCA9IGZ1bmN0aW9uIGFkZFJlcXVlc3QocmVxLCBfb3B0cykge1xuICBjb25zdCBvd25PcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgX29wdHMpO1xuXG4gIC8vIFNldCBkZWZhdWx0IGBob3N0YCBmb3IgSFRUUCB0byBsb2NhbGhvc3RcbiAgaWYgKG51bGwgPT0gb3duT3B0cy5ob3N0KSB7XG4gICAgb3duT3B0cy5ob3N0ID0gJ2xvY2FsaG9zdCc7XG4gIH1cblxuICAvLyBTZXQgZGVmYXVsdCBgcG9ydGAgZm9yIEhUVFAgaWYgbm9uZSB3YXMgZXhwbGljaXRseSBzcGVjaWZpZWRcbiAgaWYgKG51bGwgPT0gb3duT3B0cy5wb3J0KSB7XG4gICAgb3duT3B0cy5wb3J0ID0gb3duT3B0cy5zZWN1cmVFbmRwb2ludCA/IDQ0MyA6IDgwO1xuICB9XG5cbiAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucywgb3duT3B0cyk7XG5cbiAgaWYgKG9wdHMuaG9zdCAmJiBvcHRzLnBhdGgpIHtcbiAgICAvLyBJZiBib3RoIGEgYGhvc3RgIGFuZCBgcGF0aGAgYXJlIHNwZWNpZmllZCB0aGVuIGl0J3MgbW9zdCBsaWtlbHkgdGhlXG4gICAgLy8gcmVzdWx0IG9mIGEgYHVybC5wYXJzZSgpYCBjYWxsLi4uIHdlIG5lZWQgdG8gcmVtb3ZlIHRoZSBgcGF0aGAgcG9ydGlvbiBzb1xuICAgIC8vIHRoYXQgYG5ldC5jb25uZWN0KClgIGRvZXNuJ3QgYXR0ZW1wdCB0byBvcGVuIHRoYXQgYXMgYSB1bml4IHNvY2tldCBmaWxlLlxuICAgIGRlbGV0ZSBvcHRzLnBhdGg7XG4gIH1cblxuICBkZWxldGUgb3B0cy5hZ2VudDtcbiAgZGVsZXRlIG9wdHMuaG9zdG5hbWU7XG4gIGRlbGV0ZSBvcHRzLl9kZWZhdWx0QWdlbnQ7XG4gIGRlbGV0ZSBvcHRzLmRlZmF1bHRQb3J0O1xuICBkZWxldGUgb3B0cy5jcmVhdGVDb25uZWN0aW9uO1xuXG4gIC8vIEhpbnQgdG8gdXNlIFwiQ29ubmVjdGlvbjogY2xvc2VcIlxuICAvLyBYWFg6IG5vbi1kb2N1bWVudGVkIGBodHRwYCBtb2R1bGUgQVBJIDooXG4gIHJlcS5fbGFzdCA9IHRydWU7XG4gIHJlcS5zaG91bGRLZWVwQWxpdmUgPSBmYWxzZTtcblxuICAvLyBDcmVhdGUgdGhlIGBzdHJlYW0uRHVwbGV4YCBpbnN0YW5jZVxuICBsZXQgdGltZW91dDtcbiAgbGV0IHRpbWVkT3V0ID0gZmFsc2U7XG4gIGNvbnN0IHRpbWVvdXRNcyA9IHRoaXMudGltZW91dDtcbiAgY29uc3QgZnJlZVNvY2tldCA9IHRoaXMuZnJlZVNvY2tldDtcblxuICBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgIGlmIChyZXEuX2hhZEVycm9yKSByZXR1cm47XG4gICAgcmVxLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAvLyBGb3IgU2FmZXR5LiBTb21lIGFkZGl0aW9uYWwgZXJyb3JzIG1pZ2h0IGZpcmUgbGF0ZXIgb25cbiAgICAvLyBhbmQgd2UgbmVlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3QgZG91YmxlLWZpcmUgdGhlIGVycm9yIGV2ZW50LlxuICAgIHJlcS5faGFkRXJyb3IgPSB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gb250aW1lb3V0KCkge1xuICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIHRpbWVkT3V0ID0gdHJ1ZTtcbiAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQSBcInNvY2tldFwiIHdhcyBub3QgY3JlYXRlZCBmb3IgSFRUUCByZXF1ZXN0IGJlZm9yZSAnICsgdGltZW91dE1zICsgJ21zJ1xuICAgICk7XG4gICAgZXJyLmNvZGUgPSAnRVRJTUVPVVQnO1xuICAgIG9uZXJyb3IoZXJyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGxiYWNrRXJyb3IoZXJyKSB7XG4gICAgaWYgKHRpbWVkT3V0KSByZXR1cm47XG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgfVxuICAgIG9uZXJyb3IoZXJyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uc29ja2V0KHNvY2tldCkge1xuICAgIGlmICh0aW1lZE91dCkgcmV0dXJuO1xuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoaXNBZ2VudChzb2NrZXQpKSB7XG4gICAgICAvLyBgc29ja2V0YCBpcyBhY3R1YWxseSBhbiBodHRwLkFnZW50IGluc3RhbmNlLCBzbyByZWxpbnF1aXNoXG4gICAgICAvLyByZXNwb25zaWJpbGl0eSBmb3IgdGhpcyBgcmVxYCB0byB0aGUgQWdlbnQgZnJvbSBoZXJlIG9uXG4gICAgICBzb2NrZXQuYWRkUmVxdWVzdChyZXEsIG9wdHMpO1xuICAgIH0gZWxzZSBpZiAoc29ja2V0KSB7XG4gICAgICBmdW5jdGlvbiBvbmZyZWUoKSB7XG4gICAgICAgIGZyZWVTb2NrZXQoc29ja2V0LCBvcHRzKTtcbiAgICAgIH1cbiAgICAgIHNvY2tldC5vbignZnJlZScsIG9uZnJlZSk7XG4gICAgICByZXEub25Tb2NrZXQoc29ja2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFxuICAgICAgICAnbm8gRHVwbGV4IHN0cmVhbSB3YXMgcmV0dXJuZWQgdG8gYWdlbnQtYmFzZSBmb3IgYCcgKyByZXEubWV0aG9kICsgJyAnICsgcmVxLnBhdGggKyAnYCdcbiAgICAgICk7XG4gICAgICBvbmVycm9yKGVycik7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0aGlzLl9wcm9taXNpZmllZENhbGxiYWNrICYmIHRoaXMuY2FsbGJhY2subGVuZ3RoID49IDMpIHtcbiAgICAvLyBMZWdhY3kgY2FsbGJhY2sgZnVuY3Rpb24gLSBjb252ZXJ0IHRvIGEgUHJvbWlzZVxuICAgIHRoaXMuY2FsbGJhY2sgPSBwcm9taXNpZnkodGhpcy5jYWxsYmFjaywgdGhpcyk7XG4gICAgdGhpcy5fcHJvbWlzaWZpZWRDYWxsYmFjayA9IHRydWU7XG4gIH1cblxuICBpZiAodGltZW91dE1zID4gMCkge1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9udGltZW91dCwgdGltZW91dE1zKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHRoaXMuY2FsbGJhY2socmVxLCBvcHRzKSkudGhlbihvbnNvY2tldCwgY2FsbGJhY2tFcnJvcik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIFByb21pc2UucmVqZWN0KGVycikuY2F0Y2goY2FsbGJhY2tFcnJvcik7XG4gIH1cbn07XG5cbkFnZW50LnByb3RvdHlwZS5mcmVlU29ja2V0ID0gZnVuY3Rpb24gZnJlZVNvY2tldChzb2NrZXQsIG9wdHMpIHtcbiAgLy8gVE9ETyByZXVzZSBzb2NrZXRzXG4gIHNvY2tldC5kZXN0cm95KCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3QgdXJsID0gcmVxdWlyZSgndXJsJyk7XG5jb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5cbi8qKlxuICogVGhpcyBjdXJyZW50bHkgbmVlZHMgdG8gYmUgYXBwbGllZCB0byBhbGwgTm9kZS5qcyB2ZXJzaW9uc1xuICogaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIGlmIHRoZSBgcmVxYCBpcyBhbiBIVFRQIG9yIEhUVFBTIHJlcXVlc3QuXG4gKlxuICogVGhlcmUgaXMgY3VycmVudGx5IG5vIFBSIGF0dGVtcHRpbmcgdG8gbW92ZSB0aGlzIHByb3BlcnR5IHVwc3RyZWFtLlxuICovXG5jb25zdCBwYXRjaE1hcmtlciA9IFwiX19hZ2VudF9iYXNlX2h0dHBzX3JlcXVlc3RfcGF0Y2hlZF9fXCI7XG5pZiAoIWh0dHBzLnJlcXVlc3RbcGF0Y2hNYXJrZXJdKSB7XG4gIGh0dHBzLnJlcXVlc3QgPSAoZnVuY3Rpb24ocmVxdWVzdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihfb3B0aW9ucywgY2IpIHtcbiAgICAgIGxldCBvcHRpb25zO1xuICAgICAgaWYgKHR5cGVvZiBfb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgb3B0aW9ucyA9IHVybC5wYXJzZShfb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgX29wdGlvbnMpO1xuICAgICAgfVxuICAgICAgaWYgKG51bGwgPT0gb3B0aW9ucy5wb3J0KSB7XG4gICAgICAgIG9wdGlvbnMucG9ydCA9IDQ0MztcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMuc2VjdXJlRW5kcG9pbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlcXVlc3QuY2FsbChodHRwcywgb3B0aW9ucywgY2IpO1xuICAgIH07XG4gIH0pKGh0dHBzLnJlcXVlc3QpO1xuICBodHRwcy5yZXF1ZXN0W3BhdGNoTWFya2VyXSA9IHRydWU7XG59XG5cbi8qKlxuICogVGhpcyBpcyBuZWVkZWQgZm9yIE5vZGUuanMgPj0gOS4wLjAgdG8gbWFrZSBzdXJlIGBodHRwcy5nZXQoKWAgdXNlcyB0aGVcbiAqIHBhdGNoZWQgYGh0dHBzLnJlcXVlc3QoKWAuXG4gKlxuICogUmVmOiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvY29tbWl0LzUxMThmMzFcbiAqL1xuaHR0cHMuZ2V0ID0gZnVuY3Rpb24gKF91cmwsIF9vcHRpb25zLCBjYikge1xuICAgIGxldCBvcHRpb25zO1xuICAgIGlmICh0eXBlb2YgX3VybCA9PT0gJ3N0cmluZycgJiYgX29wdGlvbnMgJiYgdHlwZW9mIF9vcHRpb25zICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdXJsLnBhcnNlKF91cmwpLCBfb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmICghX29wdGlvbnMgJiYgIWNiKSB7XG4gICAgICBvcHRpb25zID0gX3VybDtcbiAgICB9IGVsc2UgaWYgKCFjYikge1xuICAgICAgb3B0aW9ucyA9IF91cmw7XG4gICAgICBjYiA9IF9vcHRpb25zO1xuICAgIH1cblxuICBjb25zdCByZXEgPSBodHRwcy5yZXF1ZXN0KG9wdGlvbnMsIGNiKTtcbiAgcmVxLmVuZCgpO1xuICByZXR1cm4gcmVxO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBnbG9iYWwgbW9kdWxlLCByZXF1aXJlICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgLy8gR2V0IGEgcHJvbWlzZSBvYmplY3QuIFRoaXMgbWF5IGJlIG5hdGl2ZSwgb3IgaXQgbWF5IGJlIHBvbHlmaWxsZWRcblxuICAgIHZhciBFUzZQcm9taXNlID0gcmVxdWlyZShcIi4vcHJvbWlzZS5qc1wiKTtcblxuICAgIC8qKlxuICAgICAqIHRoYXRMb29rc0xpa2VBUHJvbWlzZVRvTWUoKVxuICAgICAqXG4gICAgICogRHVjay10eXBlcyBhIHByb21pc2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb1xuICAgICAqIEByZXR1cm4ge2Jvb2x9IFRydWUgaWYgdGhpcyByZXNlbWJsZXMgYSBwcm9taXNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhhdExvb2tzTGlrZUFQcm9taXNlVG9NZShvKSB7XG4gICAgICAgIHJldHVybiBvICYmIHR5cGVvZiBvLnRoZW4gPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygby5jYXRjaCA9PT0gXCJmdW5jdGlvblwiO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHByb21pc2lmeSgpXG4gICAgICpcbiAgICAgKiBUcmFuc2Zvcm1zIGNhbGxiYWNrLWJhc2VkIGZ1bmN0aW9uIC0tIGZ1bmMoYXJnMSwgYXJnMiAuLiBhcmdOLCBjYWxsYmFjaykgLS0gaW50b1xuICAgICAqIGFuIEVTNi1jb21wYXRpYmxlIFByb21pc2UuIFByb21pc2lmeSBwcm92aWRlcyBhIGRlZmF1bHQgY2FsbGJhY2sgb2YgdGhlIGZvcm0gKGVycm9yLCByZXN1bHQpXG4gICAgICogYW5kIHJlamVjdHMgd2hlbiBgZXJyb3JgIGlzIHRydXRoeS4gWW91IGNhbiBhbHNvIHN1cHBseSBzZXR0aW5ncyBvYmplY3QgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG9yaWdpbmFsIC0gVGhlIGZ1bmN0aW9uIHRvIHByb21pc2lmeVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncyAtIFNldHRpbmdzIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncy50aGlzQXJnIC0gQSBgdGhpc2AgY29udGV4dCB0byB1c2UuIElmIG5vdCBzZXQsIGFzc3VtZSBgc2V0dGluZ3NgIF9pc18gYHRoaXNBcmdgXG4gICAgICogQHBhcmFtIHtib29sfSBzZXR0aW5ncy5tdWx0aUFyZ3MgLSBTaG91bGQgbXVsdGlwbGUgYXJndW1lbnRzIGJlIHJldHVybmVkIGFzIGFuIGFycmF5P1xuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBBIHByb21pc2lmaWVkIHZlcnNpb24gb2YgYG9yaWdpbmFsYFxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBwcm9taXNpZnkob3JpZ2luYWwsIHNldHRpbmdzKSB7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJldHVybk11bHRpcGxlQXJndW1lbnRzID0gc2V0dGluZ3MgJiYgc2V0dGluZ3MubXVsdGlBcmdzO1xuXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdm9pZCAwO1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzICYmIHNldHRpbmdzLnRoaXNBcmcpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBzZXR0aW5ncy50aGlzQXJnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzZXR0aW5ncykge1xuICAgICAgICAgICAgICAgIHRhcmdldCA9IHNldHRpbmdzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXR1cm4gdGhlIHByb21pc2lmaWVkIGZ1bmN0aW9uXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVTNlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgLy8gQXBwZW5kIHRoZSBjYWxsYmFjayBib3VuZCB0byB0aGUgY29udGV4dFxuICAgICAgICAgICAgICAgIGFyZ3MucHVzaChmdW5jdGlvbiBjYWxsYmFjayhlcnIpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhbHVlcyA9IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmYWxzZSA9PT0gISFyZXR1cm5NdWx0aXBsZUFyZ3VtZW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodmFsdWVzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gb3JpZ2luYWwuYXBwbHkodGFyZ2V0LCBhcmdzKTtcblxuICAgICAgICAgICAgICAgIC8vIElmIGl0IGxvb2tzIGxpa2Ugb3JpZ2luYWwgYWxyZWFkeSByZXR1cm5zIGEgcHJvbWlzZSxcbiAgICAgICAgICAgICAgICAvLyB0aGVuIGp1c3QgcmVzb2x2ZSB3aXRoIHRoYXQgcHJvbWlzZS4gSG9wZWZ1bGx5LCB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gd2UgYWRkZWQgd2lsbCBqdXN0IGJlIGlnbm9yZWQuXG4gICAgICAgICAgICAgICAgaWYgKHRoYXRMb29rc0xpa2VBUHJvbWlzZVRvTWUocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH07XG59KCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGdsb2JhbCBzZWxmLCB3aW5kb3csIG1vZHVsZSwgZ2xvYmFsLCByZXF1aXJlICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIGdsb2JhbE9iamVjdCA9IHZvaWQgMDtcblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIjtcbiAgICB9XG5cbiAgICAvLyBTZWVrIHRoZSBnbG9iYWwgb2JqZWN0XG4gICAgaWYgKGdsb2JhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGdsb2JhbE9iamVjdCA9IGdsb2JhbDtcbiAgICB9IGVsc2UgaWYgKHdpbmRvdyAhPT0gdW5kZWZpbmVkICYmIHdpbmRvdy5kb2N1bWVudCkge1xuICAgICAgICBnbG9iYWxPYmplY3QgPSB3aW5kb3c7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2xvYmFsT2JqZWN0ID0gc2VsZjtcbiAgICB9XG5cbiAgICAvLyBUZXN0IGZvciBhbnkgbmF0aXZlIHByb21pc2UgaW1wbGVtZW50YXRpb24sIGFuZCBpZiB0aGF0XG4gICAgLy8gaW1wbGVtZW50YXRpb24gYXBwZWFycyB0byBjb25mb3JtIHRvIHRoZSBzcGVjaWZpY2F0b24uXG4gICAgLy8gVGhpcyBjb2RlIG1vc3RseSBuaWNrZWQgZnJvbSB0aGUgZXM2LXByb21pc2UgbW9kdWxlIHBvbHlmaWxsXG4gICAgLy8gYW5kIHRoZW4gZm9vbGVkIHdpdGguXG4gICAgdmFyIGhhc1Byb21pc2VTdXBwb3J0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIC8vIE5vIHByb21pc2Ugb2JqZWN0IGF0IGFsbCwgYW5kIGl0J3MgYSBub24tc3RhcnRlclxuICAgICAgICBpZiAoIWdsb2JhbE9iamVjdC5oYXNPd25Qcm9wZXJ0eShcIlByb21pc2VcIikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZXJlIGlzIGEgUHJvbWlzZSBvYmplY3QuIERvZXMgaXQgY29uZm9ybSB0byB0aGUgc3BlYz9cbiAgICAgICAgdmFyIFAgPSBnbG9iYWxPYmplY3QuUHJvbWlzZTtcblxuICAgICAgICAvLyBTb21lIG9mIHRoZXNlIG1ldGhvZHMgYXJlIG1pc3NpbmcgZnJvbVxuICAgICAgICAvLyBGaXJlZm94L0Nocm9tZSBleHBlcmltZW50YWwgaW1wbGVtZW50YXRpb25zXG4gICAgICAgIGlmICghUC5oYXNPd25Qcm9wZXJ0eShcInJlc29sdmVcIikgfHwgIVAuaGFzT3duUHJvcGVydHkoXCJyZWplY3RcIikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghUC5oYXNPd25Qcm9wZXJ0eShcImFsbFwiKSB8fCAhUC5oYXNPd25Qcm9wZXJ0eShcInJhY2VcIikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9sZGVyIHZlcnNpb24gb2YgdGhlIHNwZWMgaGFkIGEgcmVzb2x2ZXIgb2JqZWN0XG4gICAgICAgIC8vIGFzIHRoZSBhcmcgcmF0aGVyIHRoYW4gYSBmdW5jdGlvblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICB2YXIgcmVzb2x2ZSA9IHZvaWQgMDtcblxuICAgICAgICAgICAgdmFyIHAgPSBuZXcgZ2xvYmFsT2JqZWN0LlByb21pc2UoZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlID0gcjtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAocCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKHJlc29sdmUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0oKTtcbiAgICB9KCk7XG5cbiAgICAvLyBFeHBvcnQgdGhlIG5hdGl2ZSBQcm9taXNlIGltcGxlbWVudGF0aW9uIGlmIGl0XG4gICAgLy8gbG9va3MgbGlrZSBpdCBtYXRjaGVzIHRoZSBzcGVjXG4gICAgaWYgKGhhc1Byb21pc2VTdXBwb3J0KSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxPYmplY3QuUHJvbWlzZTtcbiAgICB9XG5cbiAgICAvLyAgT3RoZXJ3aXNlLCByZXR1cm4gdGhlIGVzNi1wcm9taXNlIHBvbHlmaWxsIGJ5IEBqYWZmYXRoZWNha2UuXG4gICAgcmV0dXJuIHJlcXVpcmUoXCJlczYtcHJvbWlzZVwiKS5Qcm9taXNlO1xufSgpOyIsIi8qIVxuICogQG92ZXJ2aWV3IGVzNi1wcm9taXNlIC0gYSB0aW55IGltcGxlbWVudGF0aW9uIG9mIFByb21pc2VzL0ErLlxuICogQGNvcHlyaWdodCBDb3B5cmlnaHQgKGMpIDIwMTQgWWVodWRhIEthdHosIFRvbSBEYWxlLCBTdGVmYW4gUGVubmVyIGFuZCBjb250cmlidXRvcnMgKENvbnZlcnNpb24gdG8gRVM2IEFQSSBieSBKYWtlIEFyY2hpYmFsZClcbiAqIEBsaWNlbnNlICAgTGljZW5zZWQgdW5kZXIgTUlUIGxpY2Vuc2VcbiAqICAgICAgICAgICAgU2VlIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zdGVmYW5wZW5uZXIvZXM2LXByb21pc2UvbWFzdGVyL0xJQ0VOU0VcbiAqIEB2ZXJzaW9uICAgdjQuMi44KzFlNjhkY2U2XG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLkVTNlByb21pc2UgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG9iamVjdE9yRnVuY3Rpb24oeCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB4O1xuICByZXR1cm4geCAhPT0gbnVsbCAmJiAodHlwZSA9PT0gJ29iamVjdCcgfHwgdHlwZSA9PT0gJ2Z1bmN0aW9uJyk7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG5cblxuXG52YXIgX2lzQXJyYXkgPSB2b2lkIDA7XG5pZiAoQXJyYXkuaXNBcnJheSkge1xuICBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG59IGVsc2Uge1xuICBfaXNBcnJheSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcbn1cblxudmFyIGlzQXJyYXkgPSBfaXNBcnJheTtcblxudmFyIGxlbiA9IDA7XG52YXIgdmVydHhOZXh0ID0gdm9pZCAwO1xudmFyIGN1c3RvbVNjaGVkdWxlckZuID0gdm9pZCAwO1xuXG52YXIgYXNhcCA9IGZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGFyZykge1xuICBxdWV1ZVtsZW5dID0gY2FsbGJhY2s7XG4gIHF1ZXVlW2xlbiArIDFdID0gYXJnO1xuICBsZW4gKz0gMjtcbiAgaWYgKGxlbiA9PT0gMikge1xuICAgIC8vIElmIGxlbiBpcyAyLCB0aGF0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byBzY2hlZHVsZSBhbiBhc3luYyBmbHVzaC5cbiAgICAvLyBJZiBhZGRpdGlvbmFsIGNhbGxiYWNrcyBhcmUgcXVldWVkIGJlZm9yZSB0aGUgcXVldWUgaXMgZmx1c2hlZCwgdGhleVxuICAgIC8vIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IHRoaXMgZmx1c2ggdGhhdCB3ZSBhcmUgc2NoZWR1bGluZy5cbiAgICBpZiAoY3VzdG9tU2NoZWR1bGVyRm4pIHtcbiAgICAgIGN1c3RvbVNjaGVkdWxlckZuKGZsdXNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVGbHVzaCgpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2NoZWR1bGVyKHNjaGVkdWxlRm4pIHtcbiAgY3VzdG9tU2NoZWR1bGVyRm4gPSBzY2hlZHVsZUZuO1xufVxuXG5mdW5jdGlvbiBzZXRBc2FwKGFzYXBGbikge1xuICBhc2FwID0gYXNhcEZuO1xufVxuXG52YXIgYnJvd3NlcldpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdW5kZWZpbmVkO1xudmFyIGJyb3dzZXJHbG9iYWwgPSBicm93c2VyV2luZG93IHx8IHt9O1xudmFyIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gYnJvd3Nlckdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGJyb3dzZXJHbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBpc05vZGUgPSB0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHt9LnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJztcblxuLy8gdGVzdCBmb3Igd2ViIHdvcmtlciBidXQgbm90IGluIElFMTBcbnZhciBpc1dvcmtlciA9IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGltcG9ydFNjcmlwdHMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8vIG5vZGVcbmZ1bmN0aW9uIHVzZU5leHRUaWNrKCkge1xuICAvLyBub2RlIHZlcnNpb24gMC4xMC54IGRpc3BsYXlzIGEgZGVwcmVjYXRpb24gd2FybmluZyB3aGVuIG5leHRUaWNrIGlzIHVzZWQgcmVjdXJzaXZlbHlcbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jdWpvanMvd2hlbi9pc3N1ZXMvNDEwIGZvciBkZXRhaWxzXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICB9O1xufVxuXG4vLyB2ZXJ0eFxuZnVuY3Rpb24gdXNlVmVydHhUaW1lcigpIHtcbiAgaWYgKHR5cGVvZiB2ZXJ0eE5leHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZlcnR4TmV4dChmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7XG59XG5cbmZ1bmN0aW9uIHVzZU11dGF0aW9uT2JzZXJ2ZXIoKSB7XG4gIHZhciBpdGVyYXRpb25zID0gMDtcbiAgdmFyIG9ic2VydmVyID0gbmV3IEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGZsdXNoKTtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gIG9ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgbm9kZS5kYXRhID0gaXRlcmF0aW9ucyA9ICsraXRlcmF0aW9ucyAlIDI7XG4gIH07XG59XG5cbi8vIHdlYiB3b3JrZXJcbmZ1bmN0aW9uIHVzZU1lc3NhZ2VDaGFubmVsKCkge1xuICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZsdXNoO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1c2VTZXRUaW1lb3V0KCkge1xuICAvLyBTdG9yZSBzZXRUaW1lb3V0IHJlZmVyZW5jZSBzbyBlczYtcHJvbWlzZSB3aWxsIGJlIHVuYWZmZWN0ZWQgYnlcbiAgLy8gb3RoZXIgY29kZSBtb2RpZnlpbmcgc2V0VGltZW91dCAobGlrZSBzaW5vbi51c2VGYWtlVGltZXJzKCkpXG4gIHZhciBnbG9iYWxTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2xvYmFsU2V0VGltZW91dChmbHVzaCwgMSk7XG4gIH07XG59XG5cbnZhciBxdWV1ZSA9IG5ldyBBcnJheSgxMDAwKTtcbmZ1bmN0aW9uIGZsdXNoKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gcXVldWVbaV07XG4gICAgdmFyIGFyZyA9IHF1ZXVlW2kgKyAxXTtcblxuICAgIGNhbGxiYWNrKGFyZyk7XG5cbiAgICBxdWV1ZVtpXSA9IHVuZGVmaW5lZDtcbiAgICBxdWV1ZVtpICsgMV0gPSB1bmRlZmluZWQ7XG4gIH1cblxuICBsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBhdHRlbXB0VmVydHgoKSB7XG4gIHRyeSB7XG4gICAgdmFyIHZlcnR4ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKS5yZXF1aXJlKCd2ZXJ0eCcpO1xuICAgIHZlcnR4TmV4dCA9IHZlcnR4LnJ1bk9uTG9vcCB8fCB2ZXJ0eC5ydW5PbkNvbnRleHQ7XG4gICAgcmV0dXJuIHVzZVZlcnR4VGltZXIoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7XG4gIH1cbn1cblxudmFyIHNjaGVkdWxlRmx1c2ggPSB2b2lkIDA7XG4vLyBEZWNpZGUgd2hhdCBhc3luYyBtZXRob2QgdG8gdXNlIHRvIHRyaWdnZXJpbmcgcHJvY2Vzc2luZyBvZiBxdWV1ZWQgY2FsbGJhY2tzOlxuaWYgKGlzTm9kZSkge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTmV4dFRpY2soKTtcbn0gZWxzZSBpZiAoQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU11dGF0aW9uT2JzZXJ2ZXIoKTtcbn0gZWxzZSBpZiAoaXNXb3JrZXIpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU1lc3NhZ2VDaGFubmVsKCk7XG59IGVsc2UgaWYgKGJyb3dzZXJXaW5kb3cgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICBzY2hlZHVsZUZsdXNoID0gYXR0ZW1wdFZlcnR4KCk7XG59IGVsc2Uge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlU2V0VGltZW91dCgpO1xufVxuXG5mdW5jdGlvbiB0aGVuKG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzO1xuXG4gIHZhciBjaGlsZCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG5vb3ApO1xuXG4gIGlmIChjaGlsZFtQUk9NSVNFX0lEXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbWFrZVByb21pc2UoY2hpbGQpO1xuICB9XG5cbiAgdmFyIF9zdGF0ZSA9IHBhcmVudC5fc3RhdGU7XG5cblxuICBpZiAoX3N0YXRlKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzW19zdGF0ZSAtIDFdO1xuICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGludm9rZUNhbGxiYWNrKF9zdGF0ZSwgY2hpbGQsIGNhbGxiYWNrLCBwYXJlbnQuX3Jlc3VsdCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZDtcbn1cblxuLyoqXG4gIGBQcm9taXNlLnJlc29sdmVgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgcmVzb2x2ZWQgd2l0aCB0aGVcbiAgcGFzc2VkIGB2YWx1ZWAuIEl0IGlzIHNob3J0aGFuZCBmb3IgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICByZXNvbHZlKDEpO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIHZhbHVlID09PSAxXG4gIH0pO1xuICBgYGBcblxuICBJbnN0ZWFkIG9mIHdyaXRpbmcgdGhlIGFib3ZlLCB5b3VyIGNvZGUgbm93IHNpbXBseSBiZWNvbWVzIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgxKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIHZhbHVlID09PSAxXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIHJlc29sdmVcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FueX0gdmFsdWUgdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIHdpdGhcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCB3aWxsIGJlY29tZSBmdWxmaWxsZWQgd2l0aCB0aGUgZ2l2ZW5cbiAgYHZhbHVlYFxuKi9cbmZ1bmN0aW9uIHJlc29sdmUkMShvYmplY3QpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICBpZiAob2JqZWN0ICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdC5jb25zdHJ1Y3RvciA9PT0gQ29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG5cbiAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7XG4gIHJlc29sdmUocHJvbWlzZSwgb2JqZWN0KTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbnZhciBQUk9NSVNFX0lEID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIpO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIFBFTkRJTkcgPSB2b2lkIDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG5cbmZ1bmN0aW9uIHNlbGZGdWxmaWxsbWVudCgpIHtcbiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgY2Fubm90IHJlc29sdmUgYSBwcm9taXNlIHdpdGggaXRzZWxmXCIpO1xufVxuXG5mdW5jdGlvbiBjYW5ub3RSZXR1cm5Pd24oKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKCdBIHByb21pc2VzIGNhbGxiYWNrIGNhbm5vdCByZXR1cm4gdGhhdCBzYW1lIHByb21pc2UuJyk7XG59XG5cbmZ1bmN0aW9uIHRyeVRoZW4odGhlbiQkMSwgdmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcikge1xuICB0cnkge1xuICAgIHRoZW4kJDEuY2FsbCh2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSwgdGhlbiQkMSkge1xuICBhc2FwKGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgdmFyIHNlYWxlZCA9IGZhbHNlO1xuICAgIHZhciBlcnJvciA9IHRyeVRoZW4odGhlbiQkMSwgdGhlbmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgaWYgKHRoZW5hYmxlICE9PSB2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VhbGVkID0gdHJ1ZTtcblxuICAgICAgcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSwgJ1NldHRsZTogJyArIChwcm9taXNlLl9sYWJlbCB8fCAnIHVua25vd24gcHJvbWlzZScpKTtcblxuICAgIGlmICghc2VhbGVkICYmIGVycm9yKSB7XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICB9XG4gIH0sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSkge1xuICBpZiAodGhlbmFibGUuX3N0YXRlID09PSBGVUxGSUxMRUQpIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICB9IGVsc2UgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICByZWplY3QocHJvbWlzZSwgdGhlbmFibGUuX3Jlc3VsdCk7XG4gIH0gZWxzZSB7XG4gICAgc3Vic2NyaWJlKHRoZW5hYmxlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJDEpIHtcbiAgaWYgKG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IgPT09IHByb21pc2UuY29uc3RydWN0b3IgJiYgdGhlbiQkMSA9PT0gdGhlbiAmJiBtYXliZVRoZW5hYmxlLmNvbnN0cnVjdG9yLnJlc29sdmUgPT09IHJlc29sdmUkMSkge1xuICAgIGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0aGVuJCQxID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoZW4kJDEpKSB7XG4gICAgICBoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbiQkMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpIHtcbiAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgcmVqZWN0KHByb21pc2UsIHNlbGZGdWxmaWxsbWVudCgpKTtcbiAgfSBlbHNlIGlmIChvYmplY3RPckZ1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciB0aGVuJCQxID0gdm9pZCAwO1xuICAgIHRyeSB7XG4gICAgICB0aGVuJCQxID0gdmFsdWUudGhlbjtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCB2YWx1ZSwgdGhlbiQkMSk7XG4gIH0gZWxzZSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVibGlzaFJlamVjdGlvbihwcm9taXNlKSB7XG4gIGlmIChwcm9taXNlLl9vbmVycm9yKSB7XG4gICAgcHJvbWlzZS5fb25lcnJvcihwcm9taXNlLl9yZXN1bHQpO1xuICB9XG5cbiAgcHVibGlzaChwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gZnVsZmlsbChwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9taXNlLl9yZXN1bHQgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fc3RhdGUgPSBGVUxGSUxMRUQ7XG5cbiAgaWYgKHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzYXAocHVibGlzaCwgcHJvbWlzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcHJvbWlzZS5fc3RhdGUgPSBSRUpFQ1RFRDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gcmVhc29uO1xuXG4gIGFzYXAocHVibGlzaFJlamVjdGlvbiwgcHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgX3N1YnNjcmliZXJzID0gcGFyZW50Ll9zdWJzY3JpYmVycztcbiAgdmFyIGxlbmd0aCA9IF9zdWJzY3JpYmVycy5sZW5ndGg7XG5cblxuICBwYXJlbnQuX29uZXJyb3IgPSBudWxsO1xuXG4gIF9zdWJzY3JpYmVyc1tsZW5ndGhdID0gY2hpbGQ7XG4gIF9zdWJzY3JpYmVyc1tsZW5ndGggKyBGVUxGSUxMRURdID0gb25GdWxmaWxsbWVudDtcbiAgX3N1YnNjcmliZXJzW2xlbmd0aCArIFJFSkVDVEVEXSA9IG9uUmVqZWN0aW9uO1xuXG4gIGlmIChsZW5ndGggPT09IDAgJiYgcGFyZW50Ll9zdGF0ZSkge1xuICAgIGFzYXAocHVibGlzaCwgcGFyZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwdWJsaXNoKHByb21pc2UpIHtcbiAgdmFyIHN1YnNjcmliZXJzID0gcHJvbWlzZS5fc3Vic2NyaWJlcnM7XG4gIHZhciBzZXR0bGVkID0gcHJvbWlzZS5fc3RhdGU7XG5cbiAgaWYgKHN1YnNjcmliZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjaGlsZCA9IHZvaWQgMCxcbiAgICAgIGNhbGxiYWNrID0gdm9pZCAwLFxuICAgICAgZGV0YWlsID0gcHJvbWlzZS5fcmVzdWx0O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic2NyaWJlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICBjaGlsZCA9IHN1YnNjcmliZXJzW2ldO1xuICAgIGNhbGxiYWNrID0gc3Vic2NyaWJlcnNbaSArIHNldHRsZWRdO1xuXG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICBpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBjaGlsZCwgY2FsbGJhY2ssIGRldGFpbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKGRldGFpbCk7XG4gICAgfVxuICB9XG5cbiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoID0gMDtcbn1cblxuZnVuY3Rpb24gaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgcHJvbWlzZSwgY2FsbGJhY2ssIGRldGFpbCkge1xuICB2YXIgaGFzQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKGNhbGxiYWNrKSxcbiAgICAgIHZhbHVlID0gdm9pZCAwLFxuICAgICAgZXJyb3IgPSB2b2lkIDAsXG4gICAgICBzdWNjZWVkZWQgPSB0cnVlO1xuXG4gIGlmIChoYXNDYWxsYmFjaykge1xuICAgIHRyeSB7XG4gICAgICB2YWx1ZSA9IGNhbGxiYWNrKGRldGFpbCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgc3VjY2VlZGVkID0gZmFsc2U7XG4gICAgICBlcnJvciA9IGU7XG4gICAgfVxuXG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgICByZWplY3QocHJvbWlzZSwgY2Fubm90UmV0dXJuT3duKCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGRldGFpbDtcbiAgfVxuXG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIC8vIG5vb3BcbiAgfSBlbHNlIGlmIChoYXNDYWxsYmFjayAmJiBzdWNjZWVkZWQpIHtcbiAgICByZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChzdWNjZWVkZWQgPT09IGZhbHNlKSB7XG4gICAgcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBGVUxGSUxMRUQpIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBSRUpFQ1RFRCkge1xuICAgIHJlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVByb21pc2UocHJvbWlzZSwgcmVzb2x2ZXIpIHtcbiAgdHJ5IHtcbiAgICByZXNvbHZlcihmdW5jdGlvbiByZXNvbHZlUHJvbWlzZSh2YWx1ZSkge1xuICAgICAgcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gcmVqZWN0UHJvbWlzZShyZWFzb24pIHtcbiAgICAgIHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmVqZWN0KHByb21pc2UsIGUpO1xuICB9XG59XG5cbnZhciBpZCA9IDA7XG5mdW5jdGlvbiBuZXh0SWQoKSB7XG4gIHJldHVybiBpZCsrO1xufVxuXG5mdW5jdGlvbiBtYWtlUHJvbWlzZShwcm9taXNlKSB7XG4gIHByb21pc2VbUFJPTUlTRV9JRF0gPSBpZCsrO1xuICBwcm9taXNlLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gdW5kZWZpbmVkO1xuICBwcm9taXNlLl9zdWJzY3JpYmVycyA9IFtdO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0aW9uRXJyb3IoKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ0FycmF5IE1ldGhvZHMgbXVzdCBiZSBwcm92aWRlZCBhbiBBcnJheScpO1xufVxuXG52YXIgRW51bWVyYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRW51bWVyYXRvcihDb25zdHJ1Y3RvciwgaW5wdXQpIHtcbiAgICB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gICAgdGhpcy5wcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuXG4gICAgaWYgKCF0aGlzLnByb21pc2VbUFJPTUlTRV9JRF0pIHtcbiAgICAgIG1ha2VQcm9taXNlKHRoaXMucHJvbWlzZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICB0aGlzLmxlbmd0aCA9IGlucHV0Lmxlbmd0aDtcbiAgICAgIHRoaXMuX3JlbWFpbmluZyA9IGlucHV0Lmxlbmd0aDtcblxuICAgICAgdGhpcy5fcmVzdWx0ID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcblxuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sZW5ndGggPSB0aGlzLmxlbmd0aCB8fCAwO1xuICAgICAgICB0aGlzLl9lbnVtZXJhdGUoaW5wdXQpO1xuICAgICAgICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVqZWN0KHRoaXMucHJvbWlzZSwgdmFsaWRhdGlvbkVycm9yKCkpO1xuICAgIH1cbiAgfVxuXG4gIEVudW1lcmF0b3IucHJvdG90eXBlLl9lbnVtZXJhdGUgPSBmdW5jdGlvbiBfZW51bWVyYXRlKGlucHV0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IHRoaXMuX3N0YXRlID09PSBQRU5ESU5HICYmIGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fZWFjaEVudHJ5KGlucHV0W2ldLCBpKTtcbiAgICB9XG4gIH07XG5cbiAgRW51bWVyYXRvci5wcm90b3R5cGUuX2VhY2hFbnRyeSA9IGZ1bmN0aW9uIF9lYWNoRW50cnkoZW50cnksIGkpIHtcbiAgICB2YXIgYyA9IHRoaXMuX2luc3RhbmNlQ29uc3RydWN0b3I7XG4gICAgdmFyIHJlc29sdmUkJDEgPSBjLnJlc29sdmU7XG5cblxuICAgIGlmIChyZXNvbHZlJCQxID09PSByZXNvbHZlJDEpIHtcbiAgICAgIHZhciBfdGhlbiA9IHZvaWQgMDtcbiAgICAgIHZhciBlcnJvciA9IHZvaWQgMDtcbiAgICAgIHZhciBkaWRFcnJvciA9IGZhbHNlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgX3RoZW4gPSBlbnRyeS50aGVuO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBkaWRFcnJvciA9IHRydWU7XG4gICAgICAgIGVycm9yID0gZTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGVuID09PSB0aGVuICYmIGVudHJ5Ll9zdGF0ZSAhPT0gUEVORElORykge1xuICAgICAgICB0aGlzLl9zZXR0bGVkQXQoZW50cnkuX3N0YXRlLCBpLCBlbnRyeS5fcmVzdWx0KTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIF90aGVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuICAgICAgICB0aGlzLl9yZXN1bHRbaV0gPSBlbnRyeTtcbiAgICAgIH0gZWxzZSBpZiAoYyA9PT0gUHJvbWlzZSQxKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IGMobm9vcCk7XG4gICAgICAgIGlmIChkaWRFcnJvcikge1xuICAgICAgICAgIHJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCBlbnRyeSwgX3RoZW4pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChwcm9taXNlLCBpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChuZXcgYyhmdW5jdGlvbiAocmVzb2x2ZSQkMSkge1xuICAgICAgICAgIHJldHVybiByZXNvbHZlJCQxKGVudHJ5KTtcbiAgICAgICAgfSksIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl93aWxsU2V0dGxlQXQocmVzb2x2ZSQkMShlbnRyeSksIGkpO1xuICAgIH1cbiAgfTtcblxuICBFbnVtZXJhdG9yLnByb3RvdHlwZS5fc2V0dGxlZEF0ID0gZnVuY3Rpb24gX3NldHRsZWRBdChzdGF0ZSwgaSwgdmFsdWUpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTtcblxuXG4gICAgaWYgKHByb21pc2UuX3N0YXRlID09PSBQRU5ESU5HKSB7XG4gICAgICB0aGlzLl9yZW1haW5pbmctLTtcblxuICAgICAgaWYgKHN0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgICAgICByZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcmVzdWx0W2ldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgIH1cbiAgfTtcblxuICBFbnVtZXJhdG9yLnByb3RvdHlwZS5fd2lsbFNldHRsZUF0ID0gZnVuY3Rpb24gX3dpbGxTZXR0bGVBdChwcm9taXNlLCBpKSB7XG4gICAgdmFyIGVudW1lcmF0b3IgPSB0aGlzO1xuXG4gICAgc3Vic2NyaWJlKHByb21pc2UsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KEZVTEZJTExFRCwgaSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoUkVKRUNURUQsIGksIHJlYXNvbik7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEVudW1lcmF0b3I7XG59KCk7XG5cbi8qKlxuICBgUHJvbWlzZS5hbGxgIGFjY2VwdHMgYW4gYXJyYXkgb2YgcHJvbWlzZXMsIGFuZCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2hcbiAgaXMgZnVsZmlsbGVkIHdpdGggYW4gYXJyYXkgb2YgZnVsZmlsbG1lbnQgdmFsdWVzIGZvciB0aGUgcGFzc2VkIHByb21pc2VzLCBvclxuICByZWplY3RlZCB3aXRoIHRoZSByZWFzb24gb2YgdGhlIGZpcnN0IHBhc3NlZCBwcm9taXNlIHRvIGJlIHJlamVjdGVkLiBJdCBjYXN0cyBhbGxcbiAgZWxlbWVudHMgb2YgdGhlIHBhc3NlZCBpdGVyYWJsZSB0byBwcm9taXNlcyBhcyBpdCBydW5zIHRoaXMgYWxnb3JpdGhtLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSByZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSByZXNvbHZlKDIpO1xuICBsZXQgcHJvbWlzZTMgPSByZXNvbHZlKDMpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gVGhlIGFycmF5IGhlcmUgd291bGQgYmUgWyAxLCAyLCAzIF07XG4gIH0pO1xuICBgYGBcblxuICBJZiBhbnkgb2YgdGhlIGBwcm9taXNlc2AgZ2l2ZW4gdG8gYGFsbGAgYXJlIHJlamVjdGVkLCB0aGUgZmlyc3QgcHJvbWlzZVxuICB0aGF0IGlzIHJlamVjdGVkIHdpbGwgYmUgZ2l2ZW4gYXMgYW4gYXJndW1lbnQgdG8gdGhlIHJldHVybmVkIHByb21pc2VzJ3NcbiAgcmVqZWN0aW9uIGhhbmRsZXIuIEZvciBleGFtcGxlOlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSByZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSByZWplY3QobmV3IEVycm9yKFwiMlwiKSk7XG4gIGxldCBwcm9taXNlMyA9IHJlamVjdChuZXcgRXJyb3IoXCIzXCIpKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zIGJlY2F1c2UgdGhlcmUgYXJlIHJlamVjdGVkIHByb21pc2VzIVxuICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgIC8vIGVycm9yLm1lc3NhZ2UgPT09IFwiMlwiXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIGFsbFxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IGVudHJpZXMgYXJyYXkgb2YgcHJvbWlzZXNcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgbGFiZWxpbmcgdGhlIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aGVuIGFsbCBgcHJvbWlzZXNgIGhhdmUgYmVlblxuICBmdWxmaWxsZWQsIG9yIHJlamVjdGVkIGlmIGFueSBvZiB0aGVtIGJlY29tZSByZWplY3RlZC5cbiAgQHN0YXRpY1xuKi9cbmZ1bmN0aW9uIGFsbChlbnRyaWVzKSB7XG4gIHJldHVybiBuZXcgRW51bWVyYXRvcih0aGlzLCBlbnRyaWVzKS5wcm9taXNlO1xufVxuXG4vKipcbiAgYFByb21pc2UucmFjZWAgcmV0dXJucyBhIG5ldyBwcm9taXNlIHdoaWNoIGlzIHNldHRsZWQgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZVxuICBmaXJzdCBwYXNzZWQgcHJvbWlzZSB0byBzZXR0bGUuXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAxJyk7XG4gICAgfSwgMjAwKTtcbiAgfSk7XG5cbiAgbGV0IHByb21pc2UyID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDInKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBQcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyByZXN1bHQgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgaXQgd2FzIHJlc29sdmVkIGJlZm9yZSBwcm9taXNlMVxuICAgIC8vIHdhcyByZXNvbHZlZC5cbiAgfSk7XG4gIGBgYFxuXG4gIGBQcm9taXNlLnJhY2VgIGlzIGRldGVybWluaXN0aWMgaW4gdGhhdCBvbmx5IHRoZSBzdGF0ZSBvZiB0aGUgZmlyc3RcbiAgc2V0dGxlZCBwcm9taXNlIG1hdHRlcnMuIEZvciBleGFtcGxlLCBldmVuIGlmIG90aGVyIHByb21pc2VzIGdpdmVuIHRvIHRoZVxuICBgcHJvbWlzZXNgIGFycmF5IGFyZ3VtZW50IGFyZSByZXNvbHZlZCwgYnV0IHRoZSBmaXJzdCBzZXR0bGVkIHByb21pc2UgaGFzXG4gIGJlY29tZSByZWplY3RlZCBiZWZvcmUgdGhlIG90aGVyIHByb21pc2VzIGJlY2FtZSBmdWxmaWxsZWQsIHRoZSByZXR1cm5lZFxuICBwcm9taXNlIHdpbGwgYmVjb21lIHJlamVjdGVkOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICBsZXQgcHJvbWlzZTIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ3Byb21pc2UgMicpKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBQcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyBDb2RlIGhlcmUgbmV2ZXIgcnVuc1xuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAncHJvbWlzZSAyJyBiZWNhdXNlIHByb21pc2UgMiBiZWNhbWUgcmVqZWN0ZWQgYmVmb3JlXG4gICAgLy8gcHJvbWlzZSAxIGJlY2FtZSBmdWxmaWxsZWRcbiAgfSk7XG4gIGBgYFxuXG4gIEFuIGV4YW1wbGUgcmVhbC13b3JsZCB1c2UgY2FzZSBpcyBpbXBsZW1lbnRpbmcgdGltZW91dHM6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBQcm9taXNlLnJhY2UoW2FqYXgoJ2Zvby5qc29uJyksIHRpbWVvdXQoNTAwMCldKVxuICBgYGBcblxuICBAbWV0aG9kIHJhY2VcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FycmF5fSBwcm9taXNlcyBhcnJheSBvZiBwcm9taXNlcyB0byBvYnNlcnZlXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHdoaWNoIHNldHRsZXMgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZSBmaXJzdCBwYXNzZWRcbiAgcHJvbWlzZSB0byBzZXR0bGUuXG4qL1xuZnVuY3Rpb24gcmFjZShlbnRyaWVzKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgaWYgKCFpc0FycmF5KGVudHJpZXMpKSB7XG4gICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiAoXywgcmVqZWN0KSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYW4gYXJyYXkgdG8gcmFjZS4nKSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZW50cmllcy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnJlc29sdmUoZW50cmllc1tpXSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yZWplY3RgIHJldHVybnMgYSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIHBhc3NlZCBgcmVhc29uYC5cbiAgSXQgaXMgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyBDb2RlIGhlcmUgZG9lc24ndCBydW4gYmVjYXVzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ1dIT09QUydcbiAgfSk7XG4gIGBgYFxuXG4gIEluc3RlYWQgb2Ygd3JpdGluZyB0aGUgYWJvdmUsIHlvdXIgY29kZSBub3cgc2ltcGx5IGJlY29tZXMgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdXSE9PUFMnKSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyBDb2RlIGhlcmUgZG9lc24ndCBydW4gYmVjYXVzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ1dIT09QUydcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgcmVqZWN0XG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBbnl9IHJlYXNvbiB2YWx1ZSB0aGF0IHRoZSByZXR1cm5lZCBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aC5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgZ2l2ZW4gYHJlYXNvbmAuXG4qL1xuZnVuY3Rpb24gcmVqZWN0JDEocmVhc29uKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuICByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIG5lZWRzUmVzb2x2ZXIoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYSByZXNvbHZlciBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIHByb21pc2UgY29uc3RydWN0b3InKTtcbn1cblxuZnVuY3Rpb24gbmVlZHNOZXcoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdQcm9taXNlJzogUGxlYXNlIHVzZSB0aGUgJ25ldycgb3BlcmF0b3IsIHRoaXMgb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG59XG5cbi8qKlxuICBQcm9taXNlIG9iamVjdHMgcmVwcmVzZW50IHRoZSBldmVudHVhbCByZXN1bHQgb2YgYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbi4gVGhlXG4gIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsIHdoaWNoXG4gIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlIHJlYXNvblxuICB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC5cblxuICBUZXJtaW5vbG9neVxuICAtLS0tLS0tLS0tLVxuXG4gIC0gYHByb21pc2VgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB3aXRoIGEgYHRoZW5gIG1ldGhvZCB3aG9zZSBiZWhhdmlvciBjb25mb3JtcyB0byB0aGlzIHNwZWNpZmljYXRpb24uXG4gIC0gYHRoZW5hYmxlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gdGhhdCBkZWZpbmVzIGEgYHRoZW5gIG1ldGhvZC5cbiAgLSBgdmFsdWVgIGlzIGFueSBsZWdhbCBKYXZhU2NyaXB0IHZhbHVlIChpbmNsdWRpbmcgdW5kZWZpbmVkLCBhIHRoZW5hYmxlLCBvciBhIHByb21pc2UpLlxuICAtIGBleGNlcHRpb25gIGlzIGEgdmFsdWUgdGhhdCBpcyB0aHJvd24gdXNpbmcgdGhlIHRocm93IHN0YXRlbWVudC5cbiAgLSBgcmVhc29uYCBpcyBhIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoeSBhIHByb21pc2Ugd2FzIHJlamVjdGVkLlxuICAtIGBzZXR0bGVkYCB0aGUgZmluYWwgcmVzdGluZyBzdGF0ZSBvZiBhIHByb21pc2UsIGZ1bGZpbGxlZCBvciByZWplY3RlZC5cblxuICBBIHByb21pc2UgY2FuIGJlIGluIG9uZSBvZiB0aHJlZSBzdGF0ZXM6IHBlbmRpbmcsIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQuXG5cbiAgUHJvbWlzZXMgdGhhdCBhcmUgZnVsZmlsbGVkIGhhdmUgYSBmdWxmaWxsbWVudCB2YWx1ZSBhbmQgYXJlIGluIHRoZSBmdWxmaWxsZWRcbiAgc3RhdGUuICBQcm9taXNlcyB0aGF0IGFyZSByZWplY3RlZCBoYXZlIGEgcmVqZWN0aW9uIHJlYXNvbiBhbmQgYXJlIGluIHRoZVxuICByZWplY3RlZCBzdGF0ZS4gIEEgZnVsZmlsbG1lbnQgdmFsdWUgaXMgbmV2ZXIgYSB0aGVuYWJsZS5cblxuICBQcm9taXNlcyBjYW4gYWxzbyBiZSBzYWlkIHRvICpyZXNvbHZlKiBhIHZhbHVlLiAgSWYgdGhpcyB2YWx1ZSBpcyBhbHNvIGFcbiAgcHJvbWlzZSwgdGhlbiB0aGUgb3JpZ2luYWwgcHJvbWlzZSdzIHNldHRsZWQgc3RhdGUgd2lsbCBtYXRjaCB0aGUgdmFsdWUnc1xuICBzZXR0bGVkIHN0YXRlLiAgU28gYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCByZWplY3RzIHdpbGxcbiAgaXRzZWxmIHJlamVjdCwgYW5kIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgd2lsbFxuICBpdHNlbGYgZnVsZmlsbC5cblxuXG4gIEJhc2ljIFVzYWdlOlxuICAtLS0tLS0tLS0tLS1cblxuICBgYGBqc1xuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIC8vIG9uIHN1Y2Nlc3NcbiAgICByZXNvbHZlKHZhbHVlKTtcblxuICAgIC8vIG9uIGZhaWx1cmVcbiAgICByZWplY3QocmVhc29uKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgLy8gb24gcmVqZWN0aW9uXG4gIH0pO1xuICBgYGBcblxuICBBZHZhbmNlZCBVc2FnZTpcbiAgLS0tLS0tLS0tLS0tLS0tXG5cbiAgUHJvbWlzZXMgc2hpbmUgd2hlbiBhYnN0cmFjdGluZyBhd2F5IGFzeW5jaHJvbm91cyBpbnRlcmFjdGlvbnMgc3VjaCBhc1xuICBgWE1MSHR0cFJlcXVlc3Rgcy5cblxuICBgYGBqc1xuICBmdW5jdGlvbiBnZXRKU09OKHVybCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICB4aHIub3BlbignR0VUJywgdXJsKTtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBoYW5kbGVyO1xuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgeGhyLnNlbmQoKTtcblxuICAgICAgZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gdGhpcy5ET05FKSB7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIHJlc29sdmUodGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2dldEpTT046IGAnICsgdXJsICsgJ2AgZmFpbGVkIHdpdGggc3RhdHVzOiBbJyArIHRoaXMuc3RhdHVzICsgJ10nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0SlNPTignL3Bvc3RzLmpzb24nKS50aGVuKGZ1bmN0aW9uKGpzb24pIHtcbiAgICAvLyBvbiBmdWxmaWxsbWVudFxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyBvbiByZWplY3Rpb25cbiAgfSk7XG4gIGBgYFxuXG4gIFVubGlrZSBjYWxsYmFja3MsIHByb21pc2VzIGFyZSBncmVhdCBjb21wb3NhYmxlIHByaW1pdGl2ZXMuXG5cbiAgYGBganNcbiAgUHJvbWlzZS5hbGwoW1xuICAgIGdldEpTT04oJy9wb3N0cycpLFxuICAgIGdldEpTT04oJy9jb21tZW50cycpXG4gIF0pLnRoZW4oZnVuY3Rpb24odmFsdWVzKXtcbiAgICB2YWx1ZXNbMF0gLy8gPT4gcG9zdHNKU09OXG4gICAgdmFsdWVzWzFdIC8vID0+IGNvbW1lbnRzSlNPTlxuXG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSk7XG4gIGBgYFxuXG4gIEBjbGFzcyBQcm9taXNlXG4gIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmVyXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQGNvbnN0cnVjdG9yXG4qL1xuXG52YXIgUHJvbWlzZSQxID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcm9taXNlKHJlc29sdmVyKSB7XG4gICAgdGhpc1tQUk9NSVNFX0lEXSA9IG5leHRJZCgpO1xuICAgIHRoaXMuX3Jlc3VsdCA9IHRoaXMuX3N0YXRlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N1YnNjcmliZXJzID0gW107XG5cbiAgICBpZiAobm9vcCAhPT0gcmVzb2x2ZXIpIHtcbiAgICAgIHR5cGVvZiByZXNvbHZlciAhPT0gJ2Z1bmN0aW9uJyAmJiBuZWVkc1Jlc29sdmVyKCk7XG4gICAgICB0aGlzIGluc3RhbmNlb2YgUHJvbWlzZSA/IGluaXRpYWxpemVQcm9taXNlKHRoaXMsIHJlc29sdmVyKSA6IG5lZWRzTmV3KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gIFRoZSBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLFxuICB3aGljaCByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZVxuICByZWFzb24gd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG4gICBgYGBqc1xuICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24odXNlcil7XG4gICAgLy8gdXNlciBpcyBhdmFpbGFibGVcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyB1c2VyIGlzIHVuYXZhaWxhYmxlLCBhbmQgeW91IGFyZSBnaXZlbiB0aGUgcmVhc29uIHdoeVxuICB9KTtcbiAgYGBgXG4gICBDaGFpbmluZ1xuICAtLS0tLS0tLVxuICAgVGhlIHJldHVybiB2YWx1ZSBvZiBgdGhlbmAgaXMgaXRzZWxmIGEgcHJvbWlzZS4gIFRoaXMgc2Vjb25kLCAnZG93bnN0cmVhbSdcbiAgcHJvbWlzZSBpcyByZXNvbHZlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZpcnN0IHByb21pc2UncyBmdWxmaWxsbWVudFxuICBvciByZWplY3Rpb24gaGFuZGxlciwgb3IgcmVqZWN0ZWQgaWYgdGhlIGhhbmRsZXIgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgIGBgYGpzXG4gIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgIHJldHVybiB1c2VyLm5hbWU7XG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICByZXR1cm4gJ2RlZmF1bHQgbmFtZSc7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKHVzZXJOYW1lKSB7XG4gICAgLy8gSWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGB1c2VyTmFtZWAgd2lsbCBiZSB0aGUgdXNlcidzIG5hbWUsIG90aGVyd2lzZSBpdFxuICAgIC8vIHdpbGwgYmUgYCdkZWZhdWx0IG5hbWUnYFxuICB9KTtcbiAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknKTtcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScpO1xuICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIC8vIGlmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgcmVhc29uYCB3aWxsIGJlICdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScuXG4gICAgLy8gSWYgYGZpbmRVc2VyYCByZWplY3RlZCwgYHJlYXNvbmAgd2lsbCBiZSAnYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScuXG4gIH0pO1xuICBgYGBcbiAgSWYgdGhlIGRvd25zdHJlYW0gcHJvbWlzZSBkb2VzIG5vdCBzcGVjaWZ5IGEgcmVqZWN0aW9uIGhhbmRsZXIsIHJlamVjdGlvbiByZWFzb25zIHdpbGwgYmUgcHJvcGFnYXRlZCBmdXJ0aGVyIGRvd25zdHJlYW0uXG4gICBgYGBqc1xuICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICB0aHJvdyBuZXcgUGVkYWdvZ2ljYWxFeGNlcHRpb24oJ1Vwc3RyZWFtIGVycm9yJyk7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gbmV2ZXIgcmVhY2hlZFxuICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIC8vIFRoZSBgUGVkZ2Fnb2NpYWxFeGNlcHRpb25gIGlzIHByb3BhZ2F0ZWQgYWxsIHRoZSB3YXkgZG93biB0byBoZXJlXG4gIH0pO1xuICBgYGBcbiAgIEFzc2ltaWxhdGlvblxuICAtLS0tLS0tLS0tLS1cbiAgIFNvbWV0aW1lcyB0aGUgdmFsdWUgeW91IHdhbnQgdG8gcHJvcGFnYXRlIHRvIGEgZG93bnN0cmVhbSBwcm9taXNlIGNhbiBvbmx5IGJlXG4gIHJldHJpZXZlZCBhc3luY2hyb25vdXNseS4gVGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcmV0dXJuaW5nIGEgcHJvbWlzZSBpbiB0aGVcbiAgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uIGhhbmRsZXIuIFRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCB0aGVuIGJlIHBlbmRpbmdcbiAgdW50aWwgdGhlIHJldHVybmVkIHByb21pc2UgaXMgc2V0dGxlZC4gVGhpcyBpcyBjYWxsZWQgKmFzc2ltaWxhdGlvbiouXG4gICBgYGBqc1xuICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICByZXR1cm4gZmluZENvbW1lbnRzQnlBdXRob3IodXNlcik7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgLy8gVGhlIHVzZXIncyBjb21tZW50cyBhcmUgbm93IGF2YWlsYWJsZVxuICB9KTtcbiAgYGBgXG4gICBJZiB0aGUgYXNzaW1saWF0ZWQgcHJvbWlzZSByZWplY3RzLCB0aGVuIHRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCBhbHNvIHJlamVjdC5cbiAgIGBgYGpzXG4gIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIGZ1bGZpbGxzLCB3ZSdsbCBoYXZlIHRoZSB2YWx1ZSBoZXJlXG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIHJlamVjdHMsIHdlJ2xsIGhhdmUgdGhlIHJlYXNvbiBoZXJlXG4gIH0pO1xuICBgYGBcbiAgIFNpbXBsZSBFeGFtcGxlXG4gIC0tLS0tLS0tLS0tLS0tXG4gICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gICBgYGBqYXZhc2NyaXB0XG4gIGxldCByZXN1bHQ7XG4gICB0cnkge1xuICAgIHJlc3VsdCA9IGZpbmRSZXN1bHQoKTtcbiAgICAvLyBzdWNjZXNzXG4gIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgLy8gZmFpbHVyZVxuICB9XG4gIGBgYFxuICAgRXJyYmFjayBFeGFtcGxlXG4gICBgYGBqc1xuICBmaW5kUmVzdWx0KGZ1bmN0aW9uKHJlc3VsdCwgZXJyKXtcbiAgICBpZiAoZXJyKSB7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9XG4gIH0pO1xuICBgYGBcbiAgIFByb21pc2UgRXhhbXBsZTtcbiAgIGBgYGphdmFzY3JpcHRcbiAgZmluZFJlc3VsdCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyBzdWNjZXNzXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gZmFpbHVyZVxuICB9KTtcbiAgYGBgXG4gICBBZHZhbmNlZCBFeGFtcGxlXG4gIC0tLS0tLS0tLS0tLS0tXG4gICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gICBgYGBqYXZhc2NyaXB0XG4gIGxldCBhdXRob3IsIGJvb2tzO1xuICAgdHJ5IHtcbiAgICBhdXRob3IgPSBmaW5kQXV0aG9yKCk7XG4gICAgYm9va3MgID0gZmluZEJvb2tzQnlBdXRob3IoYXV0aG9yKTtcbiAgICAvLyBzdWNjZXNzXG4gIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgLy8gZmFpbHVyZVxuICB9XG4gIGBgYFxuICAgRXJyYmFjayBFeGFtcGxlXG4gICBgYGBqc1xuICAgZnVuY3Rpb24gZm91bmRCb29rcyhib29rcykge1xuICAgfVxuICAgZnVuY3Rpb24gZmFpbHVyZShyZWFzb24pIHtcbiAgIH1cbiAgIGZpbmRBdXRob3IoZnVuY3Rpb24oYXV0aG9yLCBlcnIpe1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZmluZEJvb29rc0J5QXV0aG9yKGF1dGhvciwgZnVuY3Rpb24oYm9va3MsIGVycikge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZm91bmRCb29rcyhib29rcyk7XG4gICAgICAgICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAgICAgICBmYWlsdXJlKHJlYXNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgfVxuICAgICAgLy8gc3VjY2Vzc1xuICAgIH1cbiAgfSk7XG4gIGBgYFxuICAgUHJvbWlzZSBFeGFtcGxlO1xuICAgYGBgamF2YXNjcmlwdFxuICBmaW5kQXV0aG9yKCkuXG4gICAgdGhlbihmaW5kQm9va3NCeUF1dGhvcikuXG4gICAgdGhlbihmdW5jdGlvbihib29rcyl7XG4gICAgICAvLyBmb3VuZCBib29rc1xuICB9KS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gIH0pO1xuICBgYGBcbiAgIEBtZXRob2QgdGhlblxuICBAcGFyYW0ge0Z1bmN0aW9ufSBvbkZ1bGZpbGxlZFxuICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGVkXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cblxuICAvKipcbiAgYGNhdGNoYCBpcyBzaW1wbHkgc3VnYXIgZm9yIGB0aGVuKHVuZGVmaW5lZCwgb25SZWplY3Rpb24pYCB3aGljaCBtYWtlcyBpdCB0aGUgc2FtZVxuICBhcyB0aGUgY2F0Y2ggYmxvY2sgb2YgYSB0cnkvY2F0Y2ggc3RhdGVtZW50LlxuICBgYGBqc1xuICBmdW5jdGlvbiBmaW5kQXV0aG9yKCl7XG4gIHRocm93IG5ldyBFcnJvcignY291bGRuJ3QgZmluZCB0aGF0IGF1dGhvcicpO1xuICB9XG4gIC8vIHN5bmNocm9ub3VzXG4gIHRyeSB7XG4gIGZpbmRBdXRob3IoKTtcbiAgfSBjYXRjaChyZWFzb24pIHtcbiAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgfVxuICAvLyBhc3luYyB3aXRoIHByb21pc2VzXG4gIGZpbmRBdXRob3IoKS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICB9KTtcbiAgYGBgXG4gIEBtZXRob2QgY2F0Y2hcbiAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3Rpb25cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfVxuICAqL1xuXG5cbiAgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbiBfY2F0Y2gob25SZWplY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0aW9uKTtcbiAgfTtcblxuICAvKipcbiAgICBgZmluYWxseWAgd2lsbCBiZSBpbnZva2VkIHJlZ2FyZGxlc3Mgb2YgdGhlIHByb21pc2UncyBmYXRlIGp1c3QgYXMgbmF0aXZlXG4gICAgdHJ5L2NhdGNoL2ZpbmFsbHkgYmVoYXZlc1xuICBcbiAgICBTeW5jaHJvbm91cyBleGFtcGxlOlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRBdXRob3IoKSB7XG4gICAgICBpZiAoTWF0aC5yYW5kb20oKSA+IDAuNSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgQXV0aG9yKCk7XG4gICAgfVxuICBcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZpbmRBdXRob3IoKTsgLy8gc3VjY2VlZCBvciBmYWlsXG4gICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgcmV0dXJuIGZpbmRPdGhlckF1dGhlcigpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAvLyBhbHdheXMgcnVuc1xuICAgICAgLy8gZG9lc24ndCBhZmZlY3QgdGhlIHJldHVybiB2YWx1ZVxuICAgIH1cbiAgICBgYGBcbiAgXG4gICAgQXN5bmNocm9ub3VzIGV4YW1wbGU6XG4gIFxuICAgIGBgYGpzXG4gICAgZmluZEF1dGhvcigpLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICByZXR1cm4gZmluZE90aGVyQXV0aGVyKCk7XG4gICAgfSkuZmluYWxseShmdW5jdGlvbigpe1xuICAgICAgLy8gYXV0aG9yIHdhcyBlaXRoZXIgZm91bmQsIG9yIG5vdFxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBAbWV0aG9kIGZpbmFsbHlcbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG5cblxuICBQcm9taXNlLnByb3RvdHlwZS5maW5hbGx5ID0gZnVuY3Rpb24gX2ZpbmFsbHkoY2FsbGJhY2spIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvcjtcblxuICAgIGlmIChpc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuICAgICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhyb3cgcmVhc29uO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlLnRoZW4oY2FsbGJhY2ssIGNhbGxiYWNrKTtcbiAgfTtcblxuICByZXR1cm4gUHJvbWlzZTtcbn0oKTtcblxuUHJvbWlzZSQxLnByb3RvdHlwZS50aGVuID0gdGhlbjtcblByb21pc2UkMS5hbGwgPSBhbGw7XG5Qcm9taXNlJDEucmFjZSA9IHJhY2U7XG5Qcm9taXNlJDEucmVzb2x2ZSA9IHJlc29sdmUkMTtcblByb21pc2UkMS5yZWplY3QgPSByZWplY3QkMTtcblByb21pc2UkMS5fc2V0U2NoZWR1bGVyID0gc2V0U2NoZWR1bGVyO1xuUHJvbWlzZSQxLl9zZXRBc2FwID0gc2V0QXNhcDtcblByb21pc2UkMS5fYXNhcCA9IGFzYXA7XG5cbi8qZ2xvYmFsIHNlbGYqL1xuZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gIHZhciBsb2NhbCA9IHZvaWQgMDtcblxuICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsb2NhbCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsb2NhbCA9IHNlbGY7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGxvY2FsID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BvbHlmaWxsIGZhaWxlZCBiZWNhdXNlIGdsb2JhbCBvYmplY3QgaXMgdW5hdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBQID0gbG9jYWwuUHJvbWlzZTtcblxuICBpZiAoUCkge1xuICAgIHZhciBwcm9taXNlVG9TdHJpbmcgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICBwcm9taXNlVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUC5yZXNvbHZlKCkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIHNpbGVudGx5IGlnbm9yZWRcbiAgICB9XG5cbiAgICBpZiAocHJvbWlzZVRvU3RyaW5nID09PSAnW29iamVjdCBQcm9taXNlXScgJiYgIVAuY2FzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGxvY2FsLlByb21pc2UgPSBQcm9taXNlJDE7XG59XG5cbi8vIFN0cmFuZ2UgY29tcGF0Li5cblByb21pc2UkMS5wb2x5ZmlsbCA9IHBvbHlmaWxsO1xuUHJvbWlzZSQxLlByb21pc2UgPSBQcm9taXNlJDE7XG5cbnJldHVybiBQcm9taXNlJDE7XG5cbn0pKSk7XG5cblxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lczYtcHJvbWlzZS5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIERldGVjdCBFbGVjdHJvbiByZW5kZXJlciAvIG53anMgcHJvY2Vzcywgd2hpY2ggaXMgbm9kZSwgYnV0IHdlIHNob3VsZFxuICogdHJlYXQgYXMgYSBicm93c2VyLlxuICovXG5pZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnIHx8IHByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCBwcm9jZXNzLmJyb3dzZXIgPT09IHRydWUgfHwgcHJvY2Vzcy5fX253anMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Jyb3dzZXIuanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9ub2RlLmpzJyk7XG59XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG4vKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSBsb2NhbHN0b3JhZ2UoKTtcbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gWycjMDAwMENDJywgJyMwMDAwRkYnLCAnIzAwMzNDQycsICcjMDAzM0ZGJywgJyMwMDY2Q0MnLCAnIzAwNjZGRicsICcjMDA5OUNDJywgJyMwMDk5RkYnLCAnIzAwQ0MwMCcsICcjMDBDQzMzJywgJyMwMENDNjYnLCAnIzAwQ0M5OScsICcjMDBDQ0NDJywgJyMwMENDRkYnLCAnIzMzMDBDQycsICcjMzMwMEZGJywgJyMzMzMzQ0MnLCAnIzMzMzNGRicsICcjMzM2NkNDJywgJyMzMzY2RkYnLCAnIzMzOTlDQycsICcjMzM5OUZGJywgJyMzM0NDMDAnLCAnIzMzQ0MzMycsICcjMzNDQzY2JywgJyMzM0NDOTknLCAnIzMzQ0NDQycsICcjMzNDQ0ZGJywgJyM2NjAwQ0MnLCAnIzY2MDBGRicsICcjNjYzM0NDJywgJyM2NjMzRkYnLCAnIzY2Q0MwMCcsICcjNjZDQzMzJywgJyM5OTAwQ0MnLCAnIzk5MDBGRicsICcjOTkzM0NDJywgJyM5OTMzRkYnLCAnIzk5Q0MwMCcsICcjOTlDQzMzJywgJyNDQzAwMDAnLCAnI0NDMDAzMycsICcjQ0MwMDY2JywgJyNDQzAwOTknLCAnI0NDMDBDQycsICcjQ0MwMEZGJywgJyNDQzMzMDAnLCAnI0NDMzMzMycsICcjQ0MzMzY2JywgJyNDQzMzOTknLCAnI0NDMzNDQycsICcjQ0MzM0ZGJywgJyNDQzY2MDAnLCAnI0NDNjYzMycsICcjQ0M5OTAwJywgJyNDQzk5MzMnLCAnI0NDQ0MwMCcsICcjQ0NDQzMzJywgJyNGRjAwMDAnLCAnI0ZGMDAzMycsICcjRkYwMDY2JywgJyNGRjAwOTknLCAnI0ZGMDBDQycsICcjRkYwMEZGJywgJyNGRjMzMDAnLCAnI0ZGMzMzMycsICcjRkYzMzY2JywgJyNGRjMzOTknLCAnI0ZGMzNDQycsICcjRkYzM0ZGJywgJyNGRjY2MDAnLCAnI0ZGNjYzMycsICcjRkY5OTAwJywgJyNGRjk5MzMnLCAnI0ZGQ0MwMCcsICcjRkZDQzMzJ107XG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcbiAgLy8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2VcbiAgLy8gZXhwbGljaXRseVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cblxuXG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICAvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXG5cbiAgcmV0dXJuIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSB8fCAvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8IHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkgfHwgLy8gSXMgZmlyZWZveCA+PSB2MzE/XG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxIHx8IC8vIERvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcbiAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLyk7XG59XG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIGFyZ3NbMF0gPSAodGhpcy51c2VDb2xvcnMgPyAnJWMnIDogJycpICsgdGhpcy5uYW1lc3BhY2UgKyAodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgKyBhcmdzWzBdICsgKHRoaXMudXNlQ29sb3JzID8gJyVjICcgOiAnICcpICsgJysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKTsgLy8gVGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblxuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgaWYgKG1hdGNoID09PSAnJSUnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5kZXgrKztcblxuICAgIGlmIChtYXRjaCA9PT0gJyVjJykge1xuICAgICAgLy8gV2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24gbG9nKCkge1xuICB2YXIgX2NvbnNvbGU7XG5cbiAgLy8gVGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICh0eXBlb2YgY29uc29sZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGNvbnNvbGUpKSA9PT0gJ29iamVjdCcgJiYgY29uc29sZS5sb2cgJiYgKF9jb25zb2xlID0gY29uc29sZSkubG9nLmFwcGx5KF9jb25zb2xlLCBhcmd1bWVudHMpO1xufVxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnNldEl0ZW0oJ2RlYnVnJywgbmFtZXNwYWNlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHsvLyBTd2FsbG93XG4gICAgLy8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG4gIH1cbn1cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcblxuICB0cnkge1xuICAgIHIgPSBleHBvcnRzLnN0b3JhZ2UuZ2V0SXRlbSgnZGVidWcnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHt9IC8vIFN3YWxsb3dcbiAgLy8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcblxuXG4gIGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuICAgIHIgPSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxuXG4gIHJldHVybiByO1xufVxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICAvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG4gICAgLy8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlcnJvcikgey8vIFN3YWxsb3dcbiAgICAvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG52YXIgZm9ybWF0dGVycyA9IG1vZHVsZS5leHBvcnRzLmZvcm1hdHRlcnM7XG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcbiAgfVxufTtcblxuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB3ID0gZCAqIDc7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbCkpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG52YXIgdHR5ID0gcmVxdWlyZSgndHR5Jyk7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuLyoqXG4gKiBUaGlzIGlzIHRoZSBOb2RlLmpzIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5cbmV4cG9ydHMuaW5pdCA9IGluaXQ7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbNiwgMiwgMywgNCwgNSwgMV07XG5cbnRyeSB7XG4gIC8vIE9wdGlvbmFsIGRlcGVuZGVuY3kgKGFzIGluLCBkb2Vzbid0IG5lZWQgdG8gYmUgaW5zdGFsbGVkLCBOT1QgbGlrZSBvcHRpb25hbERlcGVuZGVuY2llcyBpbiBwYWNrYWdlLmpzb24pXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcbiAgdmFyIHN1cHBvcnRzQ29sb3IgPSByZXF1aXJlKCdzdXBwb3J0cy1jb2xvcicpO1xuXG4gIGlmIChzdXBwb3J0c0NvbG9yICYmIChzdXBwb3J0c0NvbG9yLnN0ZGVyciB8fCBzdXBwb3J0c0NvbG9yKS5sZXZlbCA+PSAyKSB7XG4gICAgZXhwb3J0cy5jb2xvcnMgPSBbMjAsIDIxLCAyNiwgMjcsIDMyLCAzMywgMzgsIDM5LCA0MCwgNDEsIDQyLCA0MywgNDQsIDQ1LCA1NiwgNTcsIDYyLCA2MywgNjgsIDY5LCA3NCwgNzUsIDc2LCA3NywgNzgsIDc5LCA4MCwgODEsIDkyLCA5MywgOTgsIDk5LCAxMTIsIDExMywgMTI4LCAxMjksIDEzNCwgMTM1LCAxNDgsIDE0OSwgMTYwLCAxNjEsIDE2MiwgMTYzLCAxNjQsIDE2NSwgMTY2LCAxNjcsIDE2OCwgMTY5LCAxNzAsIDE3MSwgMTcyLCAxNzMsIDE3OCwgMTc5LCAxODQsIDE4NSwgMTk2LCAxOTcsIDE5OCwgMTk5LCAyMDAsIDIwMSwgMjAyLCAyMDMsIDIwNCwgMjA1LCAyMDYsIDIwNywgMjA4LCAyMDksIDIxNCwgMjE1LCAyMjAsIDIyMV07XG4gIH1cbn0gY2F0Y2ggKGVycm9yKSB7fSAvLyBTd2FsbG93IC0gd2Ugb25seSBjYXJlIGlmIGBzdXBwb3J0cy1jb2xvcmAgaXMgYXZhaWxhYmxlOyBpdCBkb2Vzbid0IGhhdmUgdG8gYmUuXG5cbi8qKlxuICogQnVpbGQgdXAgdGhlIGRlZmF1bHQgYGluc3BlY3RPcHRzYCBvYmplY3QgZnJvbSB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICpcbiAqICAgJCBERUJVR19DT0xPUlM9bm8gREVCVUdfREVQVEg9MTAgREVCVUdfU0hPV19ISURERU49ZW5hYmxlZCBub2RlIHNjcmlwdC5qc1xuICovXG5cblxuZXhwb3J0cy5pbnNwZWN0T3B0cyA9IE9iamVjdC5rZXlzKHByb2Nlc3MuZW52KS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gL15kZWJ1Z18vaS50ZXN0KGtleSk7XG59KS5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG4gIC8vIENhbWVsLWNhc2VcbiAgdmFyIHByb3AgPSBrZXkuc3Vic3RyaW5nKDYpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXyhbYS16XSkvZywgZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gay50b1VwcGVyQ2FzZSgpO1xuICB9KTsgLy8gQ29lcmNlIHN0cmluZyB2YWx1ZSBpbnRvIEpTIHZhbHVlXG5cbiAgdmFyIHZhbCA9IHByb2Nlc3MuZW52W2tleV07XG5cbiAgaWYgKC9eKHllc3xvbnx0cnVlfGVuYWJsZWQpJC9pLnRlc3QodmFsKSkge1xuICAgIHZhbCA9IHRydWU7XG4gIH0gZWxzZSBpZiAoL14obm98b2ZmfGZhbHNlfGRpc2FibGVkKSQvaS50ZXN0KHZhbCkpIHtcbiAgICB2YWwgPSBmYWxzZTtcbiAgfSBlbHNlIGlmICh2YWwgPT09ICdudWxsJykge1xuICAgIHZhbCA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgdmFsID0gTnVtYmVyKHZhbCk7XG4gIH1cblxuICBvYmpbcHJvcF0gPSB2YWw7XG4gIHJldHVybiBvYmo7XG59LCB7fSk7XG4vKipcbiAqIElzIHN0ZG91dCBhIFRUWT8gQ29sb3JlZCBvdXRwdXQgaXMgZW5hYmxlZCB3aGVuIGB0cnVlYC5cbiAqL1xuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIHJldHVybiAnY29sb3JzJyBpbiBleHBvcnRzLmluc3BlY3RPcHRzID8gQm9vbGVhbihleHBvcnRzLmluc3BlY3RPcHRzLmNvbG9ycykgOiB0dHkuaXNhdHR5KHByb2Nlc3Muc3RkZXJyLmZkKTtcbn1cbi8qKlxuICogQWRkcyBBTlNJIGNvbG9yIGVzY2FwZSBjb2RlcyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLm5hbWVzcGFjZSxcbiAgICAgIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXG4gIGlmICh1c2VDb2xvcnMpIHtcbiAgICB2YXIgYyA9IHRoaXMuY29sb3I7XG4gICAgdmFyIGNvbG9yQ29kZSA9IFwiXFx4MUJbM1wiICsgKGMgPCA4ID8gYyA6ICc4OzU7JyArIGMpO1xuICAgIHZhciBwcmVmaXggPSBcIiAgXCIuY29uY2F0KGNvbG9yQ29kZSwgXCI7MW1cIikuY29uY2F0KG5hbWUsIFwiIFxceDFCWzBtXCIpO1xuICAgIGFyZ3NbMF0gPSBwcmVmaXggKyBhcmdzWzBdLnNwbGl0KCdcXG4nKS5qb2luKCdcXG4nICsgcHJlZml4KTtcbiAgICBhcmdzLnB1c2goY29sb3JDb2RlICsgJ20rJyArIG1vZHVsZS5leHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZikgKyBcIlxceDFCWzBtXCIpO1xuICB9IGVsc2Uge1xuICAgIGFyZ3NbMF0gPSBnZXREYXRlKCkgKyBuYW1lICsgJyAnICsgYXJnc1swXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREYXRlKCkge1xuICBpZiAoZXhwb3J0cy5pbnNwZWN0T3B0cy5oaWRlRGF0ZSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJldHVybiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgKyAnICc7XG59XG4vKipcbiAqIEludm9rZXMgYHV0aWwuZm9ybWF0KClgIHdpdGggdGhlIHNwZWNpZmllZCBhcmd1bWVudHMgYW5kIHdyaXRlcyB0byBzdGRlcnIuXG4gKi9cblxuXG5mdW5jdGlvbiBsb2coKSB7XG4gIHJldHVybiBwcm9jZXNzLnN0ZGVyci53cml0ZSh1dGlsLmZvcm1hdC5hcHBseSh1dGlsLCBhcmd1bWVudHMpICsgJ1xcbicpO1xufVxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgaWYgKG5hbWVzcGFjZXMpIHtcbiAgICBwcm9jZXNzLmVudi5ERUJVRyA9IG5hbWVzcGFjZXM7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgeW91IHNldCBhIHByb2Nlc3MuZW52IGZpZWxkIHRvIG51bGwgb3IgdW5kZWZpbmVkLCBpdCBnZXRzIGNhc3QgdG8gdGhlXG4gICAgLy8gc3RyaW5nICdudWxsJyBvciAndW5kZWZpbmVkJy4gSnVzdCBkZWxldGUgaW5zdGVhZC5cbiAgICBkZWxldGUgcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH1cbn1cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBsb2FkKCkge1xuICByZXR1cm4gcHJvY2Vzcy5lbnYuREVCVUc7XG59XG4vKipcbiAqIEluaXQgbG9naWMgZm9yIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuICpcbiAqIENyZWF0ZSBhIG5ldyBgaW5zcGVjdE9wdHNgIG9iamVjdCBpbiBjYXNlIGB1c2VDb2xvcnNgIGlzIHNldFxuICogZGlmZmVyZW50bHkgZm9yIGEgcGFydGljdWxhciBgZGVidWdgIGluc3RhbmNlLlxuICovXG5cblxuZnVuY3Rpb24gaW5pdChkZWJ1Zykge1xuICBkZWJ1Zy5pbnNwZWN0T3B0cyA9IHt9O1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV4cG9ydHMuaW5zcGVjdE9wdHMpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlYnVnLmluc3BlY3RPcHRzW2tleXNbaV1dID0gZXhwb3J0cy5pbnNwZWN0T3B0c1trZXlzW2ldXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG52YXIgZm9ybWF0dGVycyA9IG1vZHVsZS5leHBvcnRzLmZvcm1hdHRlcnM7XG4vKipcbiAqIE1hcCAlbyB0byBgdXRpbC5pbnNwZWN0KClgLCBhbGwgb24gYSBzaW5nbGUgbGluZS5cbiAqL1xuXG5mb3JtYXR0ZXJzLm8gPSBmdW5jdGlvbiAodikge1xuICB0aGlzLmluc3BlY3RPcHRzLmNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuICByZXR1cm4gdXRpbC5pbnNwZWN0KHYsIHRoaXMuaW5zcGVjdE9wdHMpLnJlcGxhY2UoL1xccypcXG5cXHMqL2csICcgJyk7XG59O1xuLyoqXG4gKiBNYXAgJU8gdG8gYHV0aWwuaW5zcGVjdCgpYCwgYWxsb3dpbmcgbXVsdGlwbGUgbGluZXMgaWYgbmVlZGVkLlxuICovXG5cblxuZm9ybWF0dGVycy5PID0gZnVuY3Rpb24gKHYpIHtcbiAgdGhpcy5pbnNwZWN0T3B0cy5jb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcbiAgcmV0dXJuIHV0aWwuaW5zcGVjdCh2LCB0aGlzLmluc3BlY3RPcHRzKTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcbmNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTtcbmNvbnN0IGhhc0ZsYWcgPSByZXF1aXJlKCdoYXMtZmxhZycpO1xuXG5jb25zdCB7ZW52fSA9IHByb2Nlc3M7XG5cbmxldCBmb3JjZUNvbG9yO1xuaWYgKGhhc0ZsYWcoJ25vLWNvbG9yJykgfHxcblx0aGFzRmxhZygnbm8tY29sb3JzJykgfHxcblx0aGFzRmxhZygnY29sb3I9ZmFsc2UnKSB8fFxuXHRoYXNGbGFnKCdjb2xvcj1uZXZlcicpKSB7XG5cdGZvcmNlQ29sb3IgPSAwO1xufSBlbHNlIGlmIChoYXNGbGFnKCdjb2xvcicpIHx8XG5cdGhhc0ZsYWcoJ2NvbG9ycycpIHx8XG5cdGhhc0ZsYWcoJ2NvbG9yPXRydWUnKSB8fFxuXHRoYXNGbGFnKCdjb2xvcj1hbHdheXMnKSkge1xuXHRmb3JjZUNvbG9yID0gMTtcbn1cbmlmICgnRk9SQ0VfQ09MT1InIGluIGVudikge1xuXHRpZiAoZW52LkZPUkNFX0NPTE9SID09PSB0cnVlIHx8IGVudi5GT1JDRV9DT0xPUiA9PT0gJ3RydWUnKSB7XG5cdFx0Zm9yY2VDb2xvciA9IDE7XG5cdH0gZWxzZSBpZiAoZW52LkZPUkNFX0NPTE9SID09PSBmYWxzZSB8fCBlbnYuRk9SQ0VfQ09MT1IgPT09ICdmYWxzZScpIHtcblx0XHRmb3JjZUNvbG9yID0gMDtcblx0fSBlbHNlIHtcblx0XHRmb3JjZUNvbG9yID0gZW52LkZPUkNFX0NPTE9SLmxlbmd0aCA9PT0gMCA/IDEgOiBNYXRoLm1pbihwYXJzZUludChlbnYuRk9SQ0VfQ09MT1IsIDEwKSwgMyk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlTGV2ZWwobGV2ZWwpIHtcblx0aWYgKGxldmVsID09PSAwKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRsZXZlbCxcblx0XHRoYXNCYXNpYzogdHJ1ZSxcblx0XHRoYXMyNTY6IGxldmVsID49IDIsXG5cdFx0aGFzMTZtOiBsZXZlbCA+PSAzXG5cdH07XG59XG5cbmZ1bmN0aW9uIHN1cHBvcnRzQ29sb3Ioc3RyZWFtKSB7XG5cdGlmIChmb3JjZUNvbG9yID09PSAwKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRpZiAoaGFzRmxhZygnY29sb3I9MTZtJykgfHxcblx0XHRoYXNGbGFnKCdjb2xvcj1mdWxsJykgfHxcblx0XHRoYXNGbGFnKCdjb2xvcj10cnVlY29sb3InKSkge1xuXHRcdHJldHVybiAzO1xuXHR9XG5cblx0aWYgKGhhc0ZsYWcoJ2NvbG9yPTI1NicpKSB7XG5cdFx0cmV0dXJuIDI7XG5cdH1cblxuXHRpZiAoc3RyZWFtICYmICFzdHJlYW0uaXNUVFkgJiYgZm9yY2VDb2xvciA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRjb25zdCBtaW4gPSBmb3JjZUNvbG9yIHx8IDA7XG5cblx0aWYgKGVudi5URVJNID09PSAnZHVtYicpIHtcblx0XHRyZXR1cm4gbWluO1xuXHR9XG5cblx0aWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpIHtcblx0XHQvLyBOb2RlLmpzIDcuNS4wIGlzIHRoZSBmaXJzdCB2ZXJzaW9uIG9mIE5vZGUuanMgdG8gaW5jbHVkZSBhIHBhdGNoIHRvXG5cdFx0Ly8gbGlidXYgdGhhdCBlbmFibGVzIDI1NiBjb2xvciBvdXRwdXQgb24gV2luZG93cy4gQW55dGhpbmcgZWFybGllciBhbmQgaXRcblx0XHQvLyB3b24ndCB3b3JrLiBIb3dldmVyLCBoZXJlIHdlIHRhcmdldCBOb2RlLmpzIDggYXQgbWluaW11bSBhcyBpdCBpcyBhbiBMVFNcblx0XHQvLyByZWxlYXNlLCBhbmQgTm9kZS5qcyA3IGlzIG5vdC4gV2luZG93cyAxMCBidWlsZCAxMDU4NiBpcyB0aGUgZmlyc3QgV2luZG93c1xuXHRcdC8vIHJlbGVhc2UgdGhhdCBzdXBwb3J0cyAyNTYgY29sb3JzLiBXaW5kb3dzIDEwIGJ1aWxkIDE0OTMxIGlzIHRoZSBmaXJzdCByZWxlYXNlXG5cdFx0Ly8gdGhhdCBzdXBwb3J0cyAxNm0vVHJ1ZUNvbG9yLlxuXHRcdGNvbnN0IG9zUmVsZWFzZSA9IG9zLnJlbGVhc2UoKS5zcGxpdCgnLicpO1xuXHRcdGlmIChcblx0XHRcdE51bWJlcihwcm9jZXNzLnZlcnNpb25zLm5vZGUuc3BsaXQoJy4nKVswXSkgPj0gOCAmJlxuXHRcdFx0TnVtYmVyKG9zUmVsZWFzZVswXSkgPj0gMTAgJiZcblx0XHRcdE51bWJlcihvc1JlbGVhc2VbMl0pID49IDEwNTg2XG5cdFx0KSB7XG5cdFx0XHRyZXR1cm4gTnVtYmVyKG9zUmVsZWFzZVsyXSkgPj0gMTQ5MzEgPyAzIDogMjtcblx0XHR9XG5cblx0XHRyZXR1cm4gMTtcblx0fVxuXG5cdGlmICgnQ0knIGluIGVudikge1xuXHRcdGlmIChbJ1RSQVZJUycsICdDSVJDTEVDSScsICdBUFBWRVlPUicsICdHSVRMQUJfQ0knXS5zb21lKHNpZ24gPT4gc2lnbiBpbiBlbnYpIHx8IGVudi5DSV9OQU1FID09PSAnY29kZXNoaXAnKSB7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWluO1xuXHR9XG5cblx0aWYgKCdURUFNQ0lUWV9WRVJTSU9OJyBpbiBlbnYpIHtcblx0XHRyZXR1cm4gL14oOVxcLigwKlsxLTldXFxkKilcXC58XFxkezIsfVxcLikvLnRlc3QoZW52LlRFQU1DSVRZX1ZFUlNJT04pID8gMSA6IDA7XG5cdH1cblxuXHRpZiAoZW52LkNPTE9SVEVSTSA9PT0gJ3RydWVjb2xvcicpIHtcblx0XHRyZXR1cm4gMztcblx0fVxuXG5cdGlmICgnVEVSTV9QUk9HUkFNJyBpbiBlbnYpIHtcblx0XHRjb25zdCB2ZXJzaW9uID0gcGFyc2VJbnQoKGVudi5URVJNX1BST0dSQU1fVkVSU0lPTiB8fCAnJykuc3BsaXQoJy4nKVswXSwgMTApO1xuXG5cdFx0c3dpdGNoIChlbnYuVEVSTV9QUk9HUkFNKSB7XG5cdFx0XHRjYXNlICdpVGVybS5hcHAnOlxuXHRcdFx0XHRyZXR1cm4gdmVyc2lvbiA+PSAzID8gMyA6IDI7XG5cdFx0XHRjYXNlICdBcHBsZV9UZXJtaW5hbCc6XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0Ly8gTm8gZGVmYXVsdFxuXHRcdH1cblx0fVxuXG5cdGlmICgvLTI1Nihjb2xvcik/JC9pLnRlc3QoZW52LlRFUk0pKSB7XG5cdFx0cmV0dXJuIDI7XG5cdH1cblxuXHRpZiAoL15zY3JlZW58Xnh0ZXJtfF52dDEwMHxednQyMjB8XnJ4dnR8Y29sb3J8YW5zaXxjeWd3aW58bGludXgvaS50ZXN0KGVudi5URVJNKSkge1xuXHRcdHJldHVybiAxO1xuXHR9XG5cblx0aWYgKCdDT0xPUlRFUk0nIGluIGVudikge1xuXHRcdHJldHVybiAxO1xuXHR9XG5cblx0cmV0dXJuIG1pbjtcbn1cblxuZnVuY3Rpb24gZ2V0U3VwcG9ydExldmVsKHN0cmVhbSkge1xuXHRjb25zdCBsZXZlbCA9IHN1cHBvcnRzQ29sb3Ioc3RyZWFtKTtcblx0cmV0dXJuIHRyYW5zbGF0ZUxldmVsKGxldmVsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHN1cHBvcnRzQ29sb3I6IGdldFN1cHBvcnRMZXZlbCxcblx0c3Rkb3V0OiBnZXRTdXBwb3J0TGV2ZWwocHJvY2Vzcy5zdGRvdXQpLFxuXHRzdGRlcnI6IGdldFN1cHBvcnRMZXZlbChwcm9jZXNzLnN0ZGVycilcbn07XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IChmbGFnLCBhcmd2KSA9PiB7XG5cdGFyZ3YgPSBhcmd2IHx8IHByb2Nlc3MuYXJndjtcblx0Y29uc3QgcHJlZml4ID0gZmxhZy5zdGFydHNXaXRoKCctJykgPyAnJyA6IChmbGFnLmxlbmd0aCA9PT0gMSA/ICctJyA6ICctLScpO1xuXHRjb25zdCBwb3MgPSBhcmd2LmluZGV4T2YocHJlZml4ICsgZmxhZyk7XG5cdGNvbnN0IHRlcm1pbmF0b3JQb3MgPSBhcmd2LmluZGV4T2YoJy0tJyk7XG5cdHJldHVybiBwb3MgIT09IC0xICYmICh0ZXJtaW5hdG9yUG9zID09PSAtMSA/IHRydWUgOiBwb3MgPCB0ZXJtaW5hdG9yUG9zKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9